{"version":3,"file":"index.mjs","sources":["../../src/encoding/spec.ts","../../src/symbol.shim.ts","../../src/types/symbols.ts","../../src/types/registry.ts","../../src/Metadata.ts","../../src/encoder/ChangeTree.ts","../../src/encoding/encode.ts","../../src/encoding/assert.ts","../../src/encoder/EncodeOperation.ts","../../src/encoding/decode.ts","../../src/decoder/DecodeOperation.ts","../../src/types/custom/ArraySchema.ts","../../src/types/custom/MapSchema.ts","../../src/annotations.ts","../../src/utils.ts","../../src/Schema.ts","../../src/types/custom/CollectionSchema.ts","../../src/types/custom/SetSchema.ts","../../node_modules/.pnpm/@rollup+plugin-typescript@11.1.6_rollup@4.20.0_tslib@2.6.3_typescript@5.5.4/node_modules/tslib/tslib.es6.js","../../src/encoder/Encoder.ts","../../src/types/utils.ts","../../src/decoder/ReferenceTracker.ts","../../src/decoder/Decoder.ts","../../src/Reflection.ts","../../src/decoder/strategy/StateCallbacks.ts","../../src/decoder/strategy/RawChanges.ts","../../src/encoder/StateView.ts","../../src/index.ts"],"sourcesContent":["export const SWITCH_TO_STRUCTURE = 255; // (decoding collides with DELETE_AND_ADD + fieldIndex = 63)\nexport const TYPE_ID = 213;\n\n/**\n * Encoding Schema field operations.\n */\nexport enum OPERATION {\n    ADD = 128,            // (10000000) add new structure/primitive\n    REPLACE = 0,          // (00000001) replace structure/primitive\n    DELETE = 64,          // (01000000) delete field\n    DELETE_AND_MOVE = 96, // () add new structure/primitive\n    MOVE_AND_ADD = 160,   // () add new structure/primitive\n    DELETE_AND_ADD = 192, // (11000000) DELETE field, followed by an ADD\n\n    /**\n     * Collection operations\n     */\n    CLEAR = 10,\n\n    /**\n     * ArraySchema operations\n     */\n    PUSH = 11,\n    UNSHIFT = 12,\n    REVERSE = 15,\n    MOVE = 32,\n    DELETE_BY_REFID = 33, // This operation is only used at ENCODING time. During DECODING, DELETE_BY_REFID is converted to DELETE\n    ADD_BY_REFID = 129,\n\n}\n","\n//\n// Must have Symbol.metadata defined for metadata support on decorators:\n// https://github.com/microsoft/TypeScript/issues/55453#issuecomment-1687496648\n//\nexport {};\ndeclare global {\n    interface SymbolConstructor {\n        readonly metadata: unique symbol;\n    }\n}\n(Symbol as any).metadata ??= Symbol.for(\"Symbol.metadata\");","export const $track = Symbol(\"$track\");\nexport const $encoder = Symbol(\"$encoder\");\nexport const $decoder = Symbol(\"$decoder\");\n\nexport const $filter = Symbol(\"$filter\");\n\nexport const $getByIndex = Symbol(\"$getByIndex\");\nexport const $deleteByIndex = Symbol(\"$deleteByIndex\");\n\n/**\n * Used to hold ChangeTree instances whitin the structures\n */\nexport const $changes = Symbol('$changes');\n\n/**\n * Used to keep track of the type of the child elements of a collection\n * (MapSchema, ArraySchema, etc.)\n */\nexport const $childType = Symbol('$childType');\n\n/**\n * Special ChangeTree property to identify new instances\n * (Once they're encoded, they're not new anymore)\n */\nexport const $isNew = Symbol(\"$isNew\");\n\n/**\n * Optional \"discard\" method for custom types (ArraySchema)\n * (Discards changes for next serialization)\n */\nexport const $onEncodeEnd = Symbol('$onEncodeEnd');\n\n/**\n * When decoding, this method is called after the instance is fully decoded\n */\nexport const $onDecodeEnd = Symbol(\"$onDecodeEnd\");","export interface TypeDefinition {\n    constructor: any,\n}\n\nconst registeredTypes: {[identifier: string] : TypeDefinition} = {};\nconst identifiers = new Map<any, string>();\n\nexport function registerType(identifier: string, definition: TypeDefinition) {\n    identifiers.set(definition.constructor, identifier);\n    registeredTypes[identifier] = definition;\n}\n\nexport function getIdentifier(klass: any): string {\n    return identifiers.get(klass);\n}\n\nexport function getType(identifier: string): TypeDefinition {\n    return registeredTypes[identifier];\n}\n","import { getPropertyDescriptor, type DefinitionType } from \"./annotations\";\nimport { getType } from \"./types/registry\";\n\nexport type MetadataField = {\n    type: DefinitionType,\n    index: number,\n    tag?: number,\n    unreliable?: boolean,\n    deprecated?: boolean,\n    descriptor?: PropertyDescriptor,\n};\n\nexport type Metadata =\n    { [-1]: number; } & // number of fields\n    { [-2]: number[]; } & // all field indexes with \"view\" tag\n    { [-3]: {[tag: number]: number[]}; } & // field indexes by \"view\" tag\n    { [field: number]: string; } & // index => field name\n    { [field: string]: MetadataField; } // field name => field metadata\n\nexport const Metadata = {\n\n    addField(metadata: any, index: number, field: string, type: DefinitionType, descriptor?: PropertyDescriptor) {\n        if (index > 64) {\n            throw new Error(`Can't define field '${field}'.\\nSchema instances may only have up to 64 fields.`);\n        }\n\n        metadata[field] = Object.assign(\n            metadata[field] || {}, // avoid overwriting previous field metadata (@owned / @deprecated)\n            {\n                type: (Array.isArray(type))\n                    ? { array: type[0] }\n                    : type,\n                index,\n                descriptor,\n            }\n        );\n\n        // map -1 as last field index\n        Object.defineProperty(metadata, -1, {\n            value: index,\n            enumerable: false,\n            configurable: true\n        });\n\n        // map index => field name (non enumerable)\n        Object.defineProperty(metadata, index, {\n            value: field,\n            enumerable: false,\n            configurable: true,\n        });\n    },\n\n    setTag(metadata: Metadata, fieldName: string, tag: number) {\n        // add 'tag' to the field\n        const field = metadata[fieldName];\n        field.tag = tag;\n\n        if (!metadata[-2]) {\n            // -2: all field indexes with \"view\" tag\n            Object.defineProperty(metadata, -2, {\n                value: [],\n                enumerable: false,\n                configurable: true\n            });\n\n            // -3: field indexes by \"view\" tag\n            Object.defineProperty(metadata, -3, {\n                value: {},\n                enumerable: false,\n                configurable: true\n            });\n        }\n\n        metadata[-2].push(field.index);\n\n        if (!metadata[-3][tag]) {\n            metadata[-3][tag] = [];\n        }\n\n        metadata[-3][tag].push(field.index);\n    },\n\n    setFields(target: any, fields: { [field: string]: DefinitionType }) {\n        const metadata = (target.prototype.constructor[Symbol.metadata] ??= {});\n\n        // target[$track] = function (changeTree, index: number, operation: OPERATION = OPERATION.ADD) {\n        //     changeTree.change(index, operation, encodeSchemaOperation);\n        // };\n\n        // target[$encoder] = encodeSchemaOperation;\n        // target[$decoder] = decodeSchemaOperation;\n\n        // if (!target.prototype.toJSON) { target.prototype.toJSON = Schema.prototype.toJSON; }\n\n        let index = 0;\n        for (const field in fields) {\n            const type = fields[field];\n\n            // FIXME: this code is duplicated from @type() annotation\n            const complexTypeKlass = (Array.isArray(type))\n                ? getType(\"array\")\n                : (typeof(Object.keys(type)[0]) === \"string\") && getType(Object.keys(type)[0]);\n\n            Metadata.addField(\n                metadata,\n                index,\n                field,\n                type,\n                getPropertyDescriptor(`_${field}`, index, type, complexTypeKlass, metadata, field)\n            );\n\n            index++;\n        }\n    },\n\n    isDeprecated(metadata: any, field: string) {\n        return metadata[field].deprecated === true;\n    },\n\n    init(klass: any) {\n        //\n        // Used only to initialize an empty Schema (Encoder#constructor)\n        // TODO: remove/refactor this...\n        //\n        const metadata = {};\n        klass.constructor[Symbol.metadata] = metadata;\n        Object.defineProperty(metadata, -1, {\n            value: 0,\n            enumerable: false,\n            configurable: true,\n        });\n    },\n\n    initialize(constructor: any, parentMetadata?: any) {\n        let metadata: Metadata = constructor[Symbol.metadata] ?? Object.create(null);\n\n        // make sure inherited classes have their own metadata object.\n        if (constructor[Symbol.metadata] === parentMetadata) {\n            metadata = Object.create(null);\n\n            if (parentMetadata) {\n                // assign parent metadata to current\n                Object.assign(metadata, parentMetadata);\n\n                for (let i = 0; i <= parentMetadata[-1]; i++) {\n                    Object.defineProperty(metadata, i, {\n                        value: parentMetadata[i],\n                        enumerable: false,\n                        configurable: true,\n                    });\n                }\n\n                Object.defineProperty(metadata, -1, {\n                    value: parentMetadata[-1],\n                    enumerable: false,\n                    configurable: true,\n                    writable: true,\n                });\n            }\n        }\n\n        constructor[Symbol.metadata] = metadata;\n\n        return metadata;\n    },\n\n    isValidInstance(klass: any) {\n        return (\n            klass.constructor[Symbol.metadata] &&\n            Object.prototype.hasOwnProperty.call(klass.constructor[Symbol.metadata], -1) as boolean\n        );\n    },\n\n    getFields(klass: any) {\n        const metadata = klass[Symbol.metadata];\n        const fields = {};\n        for (let i = 0; i <= metadata[-1]; i++) {\n            fields[metadata[i]] = metadata[metadata[i]].type;\n        }\n        return fields;\n    }\n}","import { OPERATION } from \"../encoding/spec\";\nimport { Schema } from \"../Schema\";\nimport { $changes, $childType, $decoder, $onEncodeEnd, $encoder, $getByIndex, $isNew } from \"../types/symbols\";\n\nimport type { MapSchema } from \"../types/custom/MapSchema\";\nimport type { ArraySchema } from \"../types/custom/ArraySchema\";\nimport type { CollectionSchema } from \"../types/custom/CollectionSchema\";\nimport type { SetSchema } from \"../types/custom/SetSchema\";\n\nimport { Metadata } from \"../Metadata\";\nimport type { EncodeOperation } from \"./EncodeOperation\";\nimport type { DecodeOperation } from \"../decoder/DecodeOperation\";\n\ndeclare global {\n    interface Object {\n        // FIXME: not a good practice to extend globals here\n        [$changes]?: ChangeTree;\n        [$encoder]?: EncodeOperation,\n        [$decoder]?: DecodeOperation,\n    }\n}\n\nexport type Ref = Schema\n    | ArraySchema\n    | MapSchema\n    | CollectionSchema\n    | SetSchema;\n\nexport class Root {\n    protected nextUniqueId: number = 0;\n    refCount = new WeakMap<ChangeTree, number>();\n\n    // all changes\n    allChanges = new Map<ChangeTree, Map<number, OPERATION>>();\n    allFilteredChanges = new Map<ChangeTree, Map<number, OPERATION>>();\n\n    // pending changes to be encoded\n    changes = new Map<ChangeTree, Map<number, OPERATION>>();\n    filteredChanges = new Map<ChangeTree, Map<number, OPERATION>>();\n\n    getNextUniqueId() {\n        return this.nextUniqueId++;\n    }\n\n    add (changeTree: ChangeTree) {\n        const refCount = this.refCount.get(changeTree) || 0;\n        this.refCount.set(changeTree, refCount + 1);\n    }\n\n    remove(changeTree: ChangeTree) {\n        const refCount = this.refCount.get(changeTree);\n        if (refCount <= 1) {\n            this.allChanges.delete(changeTree);\n            this.changes.delete(changeTree);\n\n            if (changeTree.isFiltered || changeTree.isPartiallyFiltered) {\n                this.allFilteredChanges.delete(changeTree);\n                this.filteredChanges.delete(changeTree);\n            }\n\n            this.refCount.delete(changeTree);\n\n        } else {\n            this.refCount.set(changeTree, refCount - 1);\n        }\n\n        changeTree.forEachChild((child, _) =>\n            this.remove(child));\n    }\n\n    clear() {\n        this.changes.clear();\n    }\n}\n\nexport class ChangeTree<T extends Ref=any> {\n    ref: T;\n    refId: number;\n\n    root?: Root;\n\n    isFiltered?: boolean;\n    isPartiallyFiltered?: boolean;\n\n    parent?: Ref;\n    parentIndex?: number;\n\n    indexes: {[index: string]: any} = {}; // TODO: remove this, only used by MapSchema/SetSchema/CollectionSchema (`encodeKeyValueOperation`)\n    currentOperationIndex: number = 0;\n\n    allChanges = new Map<number, OPERATION>();\n    allFilteredChanges = new Map<number, OPERATION>();\n\n    changes = new Map<number, OPERATION>();\n    filteredChanges = new Map<number, OPERATION>();;\n\n    [$isNew] = true;\n\n    constructor(ref: T) {\n        this.ref = ref;\n    }\n\n    setRoot(root: Root) {\n        this.root = root;\n        this.root.add(this);\n\n        //\n        // At Schema initialization, the \"root\" structure might not be available\n        // yet, as it only does once the \"Encoder\" has been set up.\n        //\n        // So the \"parent\" may be already set without a \"root\".\n        //\n        this.checkIsFiltered(this.parent, this.parentIndex);\n\n        // unique refId for the ChangeTree.\n        this.ensureRefId();\n\n        if (!this.isFiltered) {\n            this.root.changes.set(this, this.changes);\n        }\n\n        if (this.isFiltered || this.isPartiallyFiltered) {\n            this.root.allFilteredChanges.set(this, this.allFilteredChanges);\n            this.root.filteredChanges.set(this, this.filteredChanges);\n\n        // } else {\n        //     this.root.allChanges.set(this, this.allChanges);\n        }\n\n        if (!this.isFiltered) {\n            this.root.allChanges.set(this, this.allChanges);\n        }\n\n        this.forEachChild((changeTree, _) => {\n            changeTree.setRoot(root);\n        });\n\n        // this.allChanges.forEach((_, index) => {\n        //     const childRef = this.ref[$getByIndex](index);\n        //     if (childRef && childRef[$changes]) {\n        //         childRef[$changes].setRoot(root);\n        //     }\n        // });\n    }\n\n    setParent(\n        parent: Ref,\n        root?: Root,\n        parentIndex?: number,\n    ) {\n        this.parent = parent;\n        this.parentIndex = parentIndex;\n\n        // avoid setting parents with empty `root`\n        if (!root) { return; }\n\n        root.add(this);\n\n        // skip if parent is already set\n        if (root === this.root) {\n            this.forEachChild((changeTree, atIndex) => {\n                changeTree.setParent(this.ref, root, atIndex);\n            });\n            return;\n        }\n\n        this.root = root;\n        this.checkIsFiltered(parent, parentIndex);\n\n        if (!this.isFiltered) {\n            this.root.changes.set(this, this.changes);\n            this.root.allChanges.set(this, this.allChanges);\n        }\n\n        if (this.isFiltered || this.isPartiallyFiltered) {\n            this.root.filteredChanges.set(this, this.filteredChanges);\n            this.root.allFilteredChanges.set(this, this.filteredChanges);\n        }\n\n        this.ensureRefId();\n\n        this.forEachChild((changeTree, atIndex) => {\n            changeTree.setParent(this.ref, root, atIndex);\n        });\n    }\n\n    forEachChild(callback: (change: ChangeTree, atIndex: number) => void) {\n        //\n        // assign same parent on child structures\n        //\n        if (Metadata.isValidInstance(this.ref)) {\n            const metadata: Metadata = this.ref['constructor'][Symbol.metadata];\n\n            // FIXME: need to iterate over parent metadata instead.\n            for (const field in metadata) {\n                const value = this.ref[field];\n\n                if (value && value[$changes]) {\n                    callback(value[$changes], metadata[field].index);\n                }\n            }\n\n        } else if (typeof (this.ref) === \"object\") {\n            // MapSchema / ArraySchema, etc.\n            (this.ref as MapSchema).forEach((value, key) => {\n                if (Metadata.isValidInstance(value)) {\n                    callback(value[$changes], this.ref[$changes].indexes[key]);\n                }\n            });\n        }\n    }\n\n    operation(op: OPERATION) {\n        this.changes.set(--this.currentOperationIndex, op);\n        this.root?.changes.set(this, this.changes);\n    }\n\n    change(index: number, operation: OPERATION = OPERATION.ADD) {\n        const metadata = this.ref['constructor'][Symbol.metadata] as Metadata;\n\n        const isFiltered = this.isFiltered || (metadata && metadata[metadata[index]].tag !== undefined);\n        const changeSet = (isFiltered)\n            ? this.filteredChanges\n            : this.changes;\n\n        const previousOperation = changeSet.get(index);\n        if (!previousOperation || previousOperation === OPERATION.DELETE) {\n            const op = (!previousOperation)\n                ? operation\n                : (previousOperation === OPERATION.DELETE)\n                    ? OPERATION.DELETE_AND_ADD\n                    : operation\n            changeSet.set(index, op);\n        }\n\n        //\n        // TODO: are DELETE operations being encoded as ADD here ??\n        //\n\n        if (isFiltered) {\n            this.allFilteredChanges.set(index, OPERATION.ADD);\n            this.root?.filteredChanges.set(this, this.filteredChanges);\n\n        } else {\n            this.allChanges.set(index, OPERATION.ADD);\n            this.root?.changes.set(this, this.changes);\n        }\n    }\n\n    shiftChangeIndexes(shiftIndex: number) {\n        //\n        // Used only during:\n        //\n        // - ArraySchema#unshift()\n        //\n        const changeSet = (this.isFiltered)\n            ? this.filteredChanges\n            : this.changes;\n\n        const changeSetEntries = Array.from(changeSet.entries());\n        changeSet.clear();\n\n        // Re-insert each entry with the shifted index\n        for (const [index, op] of changeSetEntries) {\n            changeSet.set(index + shiftIndex, op);\n        }\n    }\n\n    shiftAllChangeIndexes(shiftIndex: number, startIndex: number = 0) {\n        //\n        // Used only during:\n        //\n        // - ArraySchema#splice()\n        //\n        if (this.isFiltered || this.isPartiallyFiltered) {\n            this._shiftAllChangeIndexes(shiftIndex, startIndex, this.allFilteredChanges);\n            this._shiftAllChangeIndexes(shiftIndex, startIndex, this.allChanges);\n\n        } else {\n            this._shiftAllChangeIndexes(shiftIndex, startIndex, this.allChanges);\n        }\n    }\n\n    private _shiftAllChangeIndexes(shiftIndex: number, startIndex: number = 0, allChangeSet: Map<number, OPERATION>) {\n        Array.from(allChangeSet.entries()).forEach(([index, op]) => {\n            if (index >= startIndex) {\n                allChangeSet.delete(index);\n                allChangeSet.set(index + shiftIndex, op);\n            }\n        });\n    }\n\n    indexedOperation(index: number, operation: OPERATION, allChangesIndex = index) {\n        const metadata = this.ref['constructor'][Symbol.metadata] as Metadata;\n        const isFiltered = this.isFiltered || (metadata && metadata[metadata[index]].tag !== undefined);\n\n        if (isFiltered) {\n            this.allFilteredChanges.set(allChangesIndex, OPERATION.ADD);\n            this.filteredChanges.set(index, operation);\n            this.root?.filteredChanges.set(this, this.filteredChanges);\n\n        } else {\n            this.allChanges.set(allChangesIndex, OPERATION.ADD);\n            this.changes.set(index, operation);\n            this.root?.changes.set(this, this.changes);\n        }\n    }\n\n    getType(index?: number) {\n        if (Metadata.isValidInstance(this.ref)) {\n            const metadata = this.ref['constructor'][Symbol.metadata] as Metadata;\n            return metadata[metadata[index]].type;\n\n        } else {\n            //\n            // Get the child type from parent structure.\n            // - [\"string\"] => \"string\"\n            // - { map: \"string\" } => \"string\"\n            // - { set: \"string\" } => \"string\"\n            //\n            return this.ref[$childType];\n        }\n    }\n\n    getChange(index: number) {\n        // TODO: optimize this. avoid checking against multiple instances\n        return this.changes.get(index) ?? this.filteredChanges.get(index);\n    }\n\n    //\n    // used during `.encode()`\n    //\n    getValue(index: number, isEncodeAll: boolean = false) {\n        //\n        // `isEncodeAll` param is only used by ArraySchema\n        //\n        return this.ref[$getByIndex](index, isEncodeAll);\n    }\n\n    delete(index: number, operation?: OPERATION, allChangesIndex = index) {\n        if (index === undefined) {\n            try {\n                throw new Error(`@colyseus/schema ${this.ref.constructor.name}: trying to delete non-existing index '${index}'`);\n            } catch (e) {\n                console.warn(e);\n            }\n            return;\n        }\n\n        const metadata = this.ref['constructor'][Symbol.metadata] as Metadata;\n        const isFiltered = this.isFiltered || (metadata && metadata[metadata[index]].tag !== undefined);\n        const changeSet = (isFiltered)\n            ? this.filteredChanges\n            : this.changes;\n\n        const previousValue = this.getValue(index);\n\n        changeSet.set(index, operation ?? OPERATION.DELETE);\n\n        // remove `root` reference\n        if (previousValue && previousValue[$changes]) {\n            previousValue[$changes].root = undefined;\n\n            //\n            // FIXME: this.root is \"undefined\"\n            //\n            // This method is being called at decoding time when a DELETE operation is found.\n            //\n            // - This is due to using the concrete Schema class at decoding time.\n            // - \"Reflected\" structures do not have this problem.\n            //\n            // (the property descriptors should NOT be used at decoding time. only at encoding time.)\n            //\n            this.root?.remove(previousValue[$changes]);\n        }\n\n        //\n        // FIXME: this is looking a bit ugly (and repeated from `.change()`)\n        //\n        if (isFiltered) {\n            this.root?.filteredChanges.set(this, this.filteredChanges);\n            this.allFilteredChanges.delete(allChangesIndex);\n\n        } else {\n            this.root?.changes.set(this, this.changes);\n            this.allChanges.delete(allChangesIndex);\n        }\n    }\n\n    endEncode() {\n        this.changes.clear();\n        this.ref[$onEncodeEnd]?.();\n\n        // Not a new instance anymore\n        delete this[$isNew];\n    }\n\n    discard(discardAll: boolean = false) {\n        //\n        // > MapSchema:\n        //      Remove cached key to ensure ADD operations is unsed instead of\n        //      REPLACE in case same key is used on next patches.\n        //\n        this.ref[$onEncodeEnd]?.();\n\n        this.changes.clear();\n        this.filteredChanges.clear();\n\n        // reset operation index\n        this.currentOperationIndex = 0;\n\n        if (discardAll) {\n            this.allChanges.clear();\n            this.allFilteredChanges.clear();\n\n            // remove children references\n            this.forEachChild((changeTree, _) =>\n                this.root?.remove(changeTree));\n        }\n    }\n\n    /**\n     * Recursively discard all changes from this, and child structures.\n     */\n    discardAll() {\n        this.changes.forEach((_, fieldIndex) => {\n            const value = this.getValue(fieldIndex);\n\n            if (value && value[$changes]) {\n                value[$changes].discardAll();\n            }\n        });\n\n        this.discard();\n    }\n\n    ensureRefId() {\n        // skip if refId is already set.\n        if (this.refId !== undefined) {\n            return;\n        }\n\n        this.refId = this.root.getNextUniqueId();\n    }\n\n    get changed() {\n        return this.changes.size > 0;\n    }\n\n    protected checkIsFiltered(parent: Ref, parentIndex: number) {\n        // Detect if current structure has \"filters\" declared\n        this.isPartiallyFiltered = (this.ref['constructor']?.[Symbol.metadata]?.[-2] !== undefined);\n\n        // TODO: support \"partially filtered\", where the instance is visible, but only a field is not.\n\n        // Detect if parent has \"filters\" declared\n        while (parent && !this.isFiltered) {\n            const metadata: Metadata = parent['constructor'][Symbol.metadata];\n\n            const fieldName = metadata?.[parentIndex];\n            const isParentOwned = metadata?.[fieldName]?.tag !== undefined;\n\n            this.isFiltered = isParentOwned || parent[$changes].isFiltered; // metadata?.[-2]\n\n            parent = parent[$changes].parent;\n        };\n\n        //\n        // TODO: refactor this!\n        //\n        //      swapping `changes` and `filteredChanges` is required here\n        //      because \"isFiltered\" may not be imedialely available on `change()`\n        //\n        if (this.isFiltered && this.changes.size > 0) {\n            // swap changes reference\n            const changes = this.changes;\n            this.changes = this.filteredChanges;\n            this.filteredChanges = changes;\n\n            // swap \"all changes\" reference\n            const allFilteredChanges = this.allFilteredChanges;\n            this.allFilteredChanges = this.allChanges;\n            this.allChanges = allFilteredChanges;\n        }\n    }\n\n}\n","/**\n * Copyright (c) 2018 Endel Dreyer\n * Copyright (c) 2014 Ion Drive Software Ltd.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE\n */\n\nimport type { TextEncoder } from \"util\";\nimport type { Iterator } from \"./decode\";\n\nexport type BufferLike = number[] | ArrayBufferLike;\n\n/**\n * msgpack implementation highly based on notepack.io\n * https://github.com/darrachequesne/notepack\n */\n\nlet textEncoder: TextEncoder;\n// @ts-ignore\ntry { textEncoder = new TextEncoder(); } catch (e) { }\n\nconst hasBufferByteLength = (typeof Buffer !== 'undefined' && Buffer.byteLength);\n\nexport const utf8Length = (hasBufferByteLength)\n    ? Buffer.byteLength // node\n    : function (str: string, _?: any) {\n        var c = 0, length = 0;\n        for (var i = 0, l = str.length; i < l; i++) {\n            c = str.charCodeAt(i);\n            if (c < 0x80) {\n                length += 1;\n            }\n            else if (c < 0x800) {\n                length += 2;\n            }\n            else if (c < 0xd800 || c >= 0xe000) {\n                length += 3;\n            }\n            else {\n                i++;\n                length += 4;\n            }\n        }\n        return length;\n    }\n\nexport function utf8Write(view: BufferLike, str: string, it: Iterator) {\n  var c = 0;\n  for (var i = 0, l = str.length; i < l; i++) {\n    c = str.charCodeAt(i);\n    if (c < 0x80) {\n      view[it.offset++] = c;\n    }\n    else if (c < 0x800) {\n      view[it.offset++] = 0xc0 | (c >> 6);\n      view[it.offset++] = 0x80 | (c & 0x3f);\n    }\n    else if (c < 0xd800 || c >= 0xe000) {\n      view[it.offset++] = 0xe0 | (c >> 12);\n      view[it.offset++] = 0x80 | (c >> 6 & 0x3f);\n      view[it.offset++] = 0x80 | (c & 0x3f);\n    }\n    else {\n      i++;\n      c = 0x10000 + (((c & 0x3ff) << 10) | (str.charCodeAt(i) & 0x3ff));\n      view[it.offset++] = 0xf0 | (c >> 18);\n      view[it.offset++] = 0x80 | (c >> 12 & 0x3f);\n      view[it.offset++] = 0x80 | (c >> 6 & 0x3f);\n      view[it.offset++] = 0x80 | (c & 0x3f);\n    }\n  }\n}\n\nexport function int8(bytes: BufferLike, value: number, it: Iterator) {\n    bytes[it.offset++] = value & 255;\n};\n\nexport function uint8(bytes: BufferLike, value: number, it: Iterator) {\n    bytes[it.offset++] = value & 255;\n};\n\nexport function int16(bytes: BufferLike, value: number, it: Iterator) {\n    bytes[it.offset++] = value & 255;\n    bytes[it.offset++] = (value >> 8) & 255;\n};\n\nexport function uint16(bytes: BufferLike, value: number, it: Iterator) {\n    bytes[it.offset++] = value & 255;\n    bytes[it.offset++] = (value >> 8) & 255;\n};\n\nexport function int32(bytes: BufferLike, value: number, it: Iterator) {\n  bytes[it.offset++] = value & 255;\n  bytes[it.offset++] = (value >> 8) & 255;\n  bytes[it.offset++] = (value >> 16) & 255;\n  bytes[it.offset++] = (value >> 24) & 255;\n};\n\nexport function uint32(bytes: BufferLike, value: number, it: Iterator) {\n  const b4 = value >> 24;\n  const b3 = value >> 16;\n  const b2 = value >> 8;\n  const b1 = value;\n  bytes[it.offset++] = b1 & 255;\n  bytes[it.offset++] = b2 & 255;\n  bytes[it.offset++] = b3 & 255;\n  bytes[it.offset++] = b4 & 255;\n};\n\nexport function int64(bytes: BufferLike, value: number, it: Iterator) {\n  const high = Math.floor(value / Math.pow(2, 32));\n  const low = value >>> 0;\n  uint32(bytes, low, it);\n  uint32(bytes, high, it);\n};\n\nexport function uint64(bytes: BufferLike, value: number, it: Iterator) {\n  const high = (value / Math.pow(2, 32)) >> 0;\n  const low = value >>> 0;\n  uint32(bytes, low, it);\n  uint32(bytes, high, it);\n};\n\nexport function float32(bytes: BufferLike, value: number, it: Iterator) {\n  writeFloat32(bytes, value, it);\n}\n\nexport function float64(bytes: BufferLike, value: number, it: Iterator) {\n  writeFloat64(bytes, value, it);\n}\n\n// force little endian to facilitate decoding on multiple implementations\nconst _isLittleEndian = true;  // new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\nconst _int32 = new Int32Array(2);\nconst _float32 = new Float32Array(_int32.buffer);\nconst _float64 = new Float64Array(_int32.buffer);\n\nexport function writeFloat32(bytes: BufferLike, value: number, it: Iterator) {\n  _float32[0] = value;\n  int32(bytes, _int32[0], it);\n};\n\nexport function writeFloat64(bytes: BufferLike, value: number, it: Iterator) {\n  _float64[0] = value;\n  int32(bytes, _int32[_isLittleEndian ? 0 : 1], it);\n  int32(bytes, _int32[_isLittleEndian ? 1 : 0], it);\n};\n\nexport function boolean(bytes: BufferLike, value: number, it: Iterator) {\n  bytes[it.offset++] = value ? 1 : 0; // uint8\n};\n\nexport function string(bytes: BufferLike, value: string, it: Iterator) {\n  // encode `null` strings as empty.\n  if (!value) { value = \"\"; }\n\n  let length = utf8Length(value, \"utf8\");\n  let size = 0;\n\n  // fixstr\n  if (length < 0x20) {\n    bytes[it.offset++] = length | 0xa0;\n    size = 1;\n  }\n  // str 8\n  else if (length < 0x100) {\n    bytes[it.offset++] = 0xd9;\n    bytes[it.offset++] = length % 255;\n    size = 2;\n  }\n  // str 16\n  else if (length < 0x10000) {\n    bytes[it.offset++] = 0xda;\n    uint16(bytes, length, it);\n    size = 3;\n  }\n  // str 32\n  else if (length < 0x100000000) {\n    bytes[it.offset++] = 0xdb;\n    uint32(bytes, length, it);\n    size = 5;\n  } else {\n    throw new Error('String too long');\n  }\n\n  utf8Write(bytes, value, it);\n\n  return size + length;\n}\n\nexport function number(bytes: BufferLike, value: number, it: Iterator) {\n  if (isNaN(value)) {\n    return number(bytes, 0, it);\n\n  } else if (!isFinite(value)) {\n    return number(bytes, (value > 0) ? Number.MAX_SAFE_INTEGER : -Number.MAX_SAFE_INTEGER, it);\n\n  } else if (value !== (value|0)) {\n    bytes[it.offset++] = 0xcb;\n    writeFloat64(bytes, value, it);\n    return 9;\n\n    // TODO: encode float 32?\n    // is it possible to differentiate between float32 / float64 here?\n\n    // // float 32\n    // bytes.push(0xca);\n    // writeFloat32(bytes, value);\n    // return 5;\n  }\n\n  if (value >= 0) {\n    // positive fixnum\n    if (value < 0x80) {\n      bytes[it.offset++] = value & 255; // uint8\n      return 1;\n    }\n\n    // uint 8\n    if (value < 0x100) {\n      bytes[it.offset++] = 0xcc;\n      bytes[it.offset++] = value & 255; // uint8\n      return 2;\n    }\n\n    // uint 16\n    if (value < 0x10000) {\n      bytes[it.offset++] = 0xcd;\n      uint16(bytes, value, it);\n      return 3;\n    }\n\n    // uint 32\n    if (value < 0x100000000) {\n      bytes[it.offset++] = 0xce;\n      uint32(bytes, value, it);\n      return 5;\n    }\n\n    // uint 64\n    bytes[it.offset++] = 0xcf;\n    uint64(bytes, value, it);\n    return 9;\n\n  } else {\n\n    // negative fixnum\n    if (value >= -0x20) {\n      bytes[it.offset++] = 0xe0 | (value + 0x20);\n      return 1;\n    }\n\n    // int 8\n    if (value >= -0x80) {\n      bytes[it.offset++] = 0xd0;\n      int8(bytes, value, it);\n      return 2;\n    }\n\n    // int 16\n    if (value >= -0x8000) {\n      bytes[it.offset++] = 0xd1;\n      int16(bytes, value, it);\n      return 3;\n    }\n\n    // int 32\n    if (value >= -0x80000000) {\n      bytes[it.offset++] = 0xd2;\n      int32(bytes, value, it);\n      return 5;\n    }\n\n    // int 64\n    bytes[it.offset++] = 0xd3;\n    int64(bytes, value, it);\n    return 9;\n  }\n}\n","import { Schema } from \"../Schema\";\nimport { CollectionSchema } from \"../types/custom/CollectionSchema\";\nimport { MapSchema } from \"../types/custom/MapSchema\";\nimport { SetSchema } from \"../types/custom/SetSchema\";\nimport { ArraySchema } from \"../types/custom/ArraySchema\";\n\nexport class EncodeSchemaError extends Error {}\n\nexport function assertType(value: any, type: string, klass: Schema, field: string | number) {\n    let typeofTarget: string;\n    let allowNull: boolean = false;\n\n    switch (type) {\n        case \"number\":\n        case \"int8\":\n        case \"uint8\":\n        case \"int16\":\n        case \"uint16\":\n        case \"int32\":\n        case \"uint32\":\n        case \"int64\":\n        case \"uint64\":\n        case \"float32\":\n        case \"float64\":\n            typeofTarget = \"number\";\n            if (isNaN(value)) {\n                console.log(`trying to encode \"NaN\" in ${klass.constructor.name}#${field}`);\n            }\n            break;\n        case \"string\":\n            typeofTarget = \"string\";\n            allowNull = true;\n            break;\n        case \"boolean\":\n            // boolean is always encoded as true/false based on truthiness\n            return;\n    }\n\n    if (typeof (value) !== typeofTarget && (!allowNull || (allowNull && value !== null))) {\n        let foundValue = `'${JSON.stringify(value)}'${(value && value.constructor && ` (${value.constructor.name})`) || ''}`;\n        throw new EncodeSchemaError(`a '${typeofTarget}' was expected, but ${foundValue} was provided in ${klass.constructor.name}#${field}`);\n    }\n}\n\nexport function assertInstanceType(\n    value: Schema,\n    type: typeof Schema\n        | typeof ArraySchema\n        | typeof MapSchema\n        | typeof CollectionSchema\n        | typeof SetSchema,\n    klass: Schema,\n    field: string | number,\n) {\n    if (!(value instanceof type)) {\n        throw new EncodeSchemaError(`a '${type.name}' was expected, but '${value && (value as any).constructor.name}' was provided in ${klass.constructor.name}#${field}`);\n    }\n}","import { OPERATION } from \"../encoding/spec\";\nimport { $changes } from \"../types/symbols\";\nimport { getType } from \"../types/registry\";\n\nimport * as encode from \"../encoding/encode\";\nimport { EncodeSchemaError, assertInstanceType, assertType } from \"../encoding/assert\";\n\nimport type { ChangeTree, Ref } from \"./ChangeTree\";\nimport type { Encoder } from \"./Encoder\";\nimport type { Schema } from \"../Schema\";\nimport type { PrimitiveType } from \"../annotations\";\n\nimport type { Iterator } from \"../encoding/decode\";\nimport type { ArraySchema } from \"../types/custom/ArraySchema\";\n\nexport type EncodeOperation<T extends Ref = any> = (\n    encoder: Encoder,\n    bytes: Buffer,\n    changeTree: ChangeTree<T>,\n    index: number,\n    operation: OPERATION,\n    it: Iterator,\n    isEncodeAll: boolean,\n    hasView: boolean,\n) => void;\n\nexport function encodePrimitiveType(\n    type: PrimitiveType,\n    bytes: Buffer,\n    value: any,\n    klass: Schema,\n    field: string | number,\n    it: Iterator,\n) {\n    assertType(value, type as string, klass, field);\n\n    const encodeFunc = encode[type as string];\n\n    if (encodeFunc) {\n        encodeFunc(bytes, value, it);\n        // encodeFunc(bytes, value);\n\n    } else {\n        throw new EncodeSchemaError(`a '${type}' was expected, but ${value} was provided in ${klass.constructor.name}#${field}`);\n    }\n};\n\nexport function encodeValue(\n    encoder: Encoder,\n    bytes: Buffer,\n    ref: Ref,\n    type: any,\n    value: any,\n    field: string | number,\n    operation: OPERATION,\n    it: Iterator,\n) {\n    if (type[Symbol.metadata] !== undefined) {\n        // TODO: move this to the `@type()` annotation\n        assertInstanceType(value, type as typeof Schema, ref as Schema, field);\n\n        //\n        // Encode refId for this instance.\n        // The actual instance is going to be encoded on next `changeTree` iteration.\n        //\n        encode.number(bytes, value[$changes].refId, it);\n\n        // Try to encode inherited TYPE_ID if it's an ADD operation.\n        if ((operation & OPERATION.ADD) === OPERATION.ADD) {\n            encoder.tryEncodeTypeId(bytes, type as typeof Schema, value.constructor as typeof Schema, it);\n        }\n\n    } else if (typeof (type) === \"string\") {\n        //\n        // Primitive values\n        //\n        encodePrimitiveType(type as PrimitiveType, bytes, value, ref as Schema, field, it);\n\n    } else {\n        //\n        // Custom type (MapSchema, ArraySchema, etc)\n        //\n        const definition = getType(Object.keys(type)[0]);\n\n        //\n        // ensure a ArraySchema has been provided\n        //\n        assertInstanceType(ref[field], definition.constructor, ref as Schema, field);\n\n        //\n        // Encode refId for this instance.\n        // The actual instance is going to be encoded on next `changeTree` iteration.\n        //\n        encode.number(bytes, value[$changes].refId, it);\n    }\n}\n\n/**\n * Used for Schema instances.\n * @private\n */\nexport const encodeSchemaOperation: EncodeOperation = function (\n    encoder: Encoder,\n    bytes: Buffer,\n    changeTree: ChangeTree<Schema>,\n    index: number,\n    operation: OPERATION,\n    it: Iterator,\n) {\n    const ref = changeTree.ref;\n    const metadata = ref['constructor'][Symbol.metadata];\n\n    const field = metadata[index];\n    const type = metadata[field].type;\n    const value = ref[field];\n\n    // \"compress\" field index + operation\n    bytes[it.offset++] = (index | operation) & 255;\n\n    // Do not encode value for DELETE operations\n    if (operation === OPERATION.DELETE) {\n        return;\n    }\n\n    // TODO: inline this function call small performance gain\n    encodeValue(encoder, bytes, ref, type, value, field, operation, it);\n}\n\n/**\n * Used for collections (MapSchema, CollectionSchema, SetSchema)\n * @private\n */\nexport const encodeKeyValueOperation: EncodeOperation = function (\n    encoder: Encoder,\n    bytes: Buffer,\n    changeTree: ChangeTree,\n    field: number,\n    operation: OPERATION,\n    it: Iterator,\n) {\n    const ref = changeTree.ref;\n\n    // encode operation\n    bytes[it.offset++] = operation & 255;\n\n    // custom operations\n    if (operation === OPERATION.CLEAR) {\n        return;\n    }\n\n    // encode index\n    encode.number(bytes, field, it);\n\n    // Do not encode value for DELETE operations\n    if (operation === OPERATION.DELETE) {\n        return;\n    }\n\n    //\n    // encode \"alias\" for dynamic fields (maps)\n    //\n    if ((operation & OPERATION.ADD) == OPERATION.ADD) { // ADD or DELETE_AND_ADD\n        if (typeof(ref['set']) === \"function\") {\n            //\n            // MapSchema dynamic key\n            //\n            const dynamicIndex = changeTree.ref['$indexes'].get(field);\n            encode.string(bytes, dynamicIndex, it);\n        }\n    }\n\n    const type = changeTree.getType(field);\n    const value = changeTree.getValue(field);\n\n    // try { throw new Error(); } catch (e) {\n    //     // only print if not coming from Reflection.ts\n    //     if (!e.stack.includes(\"src/Reflection.ts\")) {\n    //         console.log(\"encodeKeyValueOperation -> \", {\n    //             ref: changeTree.ref.constructor.name,\n    //             field,\n    //             operation: OPERATION[operation],\n    //             value: value?.toJSON(),\n    //             items: ref.toJSON(),\n    //         });\n    //     }\n    // }\n\n    // TODO: inline this function call small performance gain\n    encodeValue(encoder, bytes, ref, type, value, field, operation, it);\n}\n\n/**\n * Used for collections (MapSchema, ArraySchema, etc.)\n * @private\n */\nexport const encodeArray: EncodeOperation = function (\n    encoder: Encoder,\n    bytes: Buffer,\n    changeTree: ChangeTree<ArraySchema>,\n    field: number,\n    operation: OPERATION,\n    it: Iterator,\n    isEncodeAll: boolean,\n    hasView: boolean,\n) {\n    const ref = changeTree.ref;\n    const useOperationByRefId = hasView && changeTree.isFiltered && (typeof (changeTree.getType(field)) !== \"string\");\n\n    let refOrIndex: number;\n\n    if (useOperationByRefId) {\n        refOrIndex = ref['tmpItems'][field][$changes].refId;\n\n        if (operation === OPERATION.DELETE) {\n            operation = OPERATION.DELETE_BY_REFID;\n\n        } else if (operation === OPERATION.ADD) {\n            operation = OPERATION.ADD_BY_REFID;\n        }\n\n    } else {\n        refOrIndex = field;\n    }\n\n    // encode operation\n    bytes[it.offset++] = operation & 255;\n\n    // custom operations\n    if (operation === OPERATION.CLEAR) {\n        return;\n    }\n\n    // encode index\n    encode.number(bytes, refOrIndex, it);\n\n    // Do not encode value for DELETE operations\n    if (operation === OPERATION.DELETE) {\n        return;\n    }\n\n    const type = changeTree.getType(field);\n    const value = changeTree.getValue(field, isEncodeAll);\n\n    // console.log(\"encodeArray -> \", {\n    //     ref: changeTree.ref.constructor.name,\n    //     field,\n    //     operation: OPERATION[operation],\n    //     value: value?.toJSON(),\n    //     items: ref.toJSON(),\n    // });\n\n    // TODO: inline this function call small performance gain\n    encodeValue(encoder, bytes, ref, type, value, field, operation, it);\n}","/**\n * Copyright (c) 2018 Endel Dreyer\n * Copyright (c) 2014 Ion Drive Software Ltd.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE\n */\n\nimport { SWITCH_TO_STRUCTURE } from \"./spec\";\nimport type { BufferLike } from \"./encode\";\n\n/**\n * msgpack implementation highly based on notepack.io\n * https://github.com/darrachequesne/notepack\n */\n\nexport interface Iterator { offset: number; }\n\nexport function utf8Read(bytes: BufferLike, it: Iterator, length: number) {\n  var string = '', chr = 0;\n  for (var i = it.offset, end = it.offset + length; i < end; i++) {\n    var byte = bytes[i];\n    if ((byte & 0x80) === 0x00) {\n      string += String.fromCharCode(byte);\n      continue;\n    }\n    if ((byte & 0xe0) === 0xc0) {\n      string += String.fromCharCode(\n        ((byte & 0x1f) << 6) |\n        (bytes[++i] & 0x3f)\n      );\n      continue;\n    }\n    if ((byte & 0xf0) === 0xe0) {\n      string += String.fromCharCode(\n        ((byte & 0x0f) << 12) |\n        ((bytes[++i] & 0x3f) << 6) |\n        ((bytes[++i] & 0x3f) << 0)\n      );\n      continue;\n    }\n    if ((byte & 0xf8) === 0xf0) {\n      chr = ((byte & 0x07) << 18) |\n        ((bytes[++i] & 0x3f) << 12) |\n        ((bytes[++i] & 0x3f) << 6) |\n        ((bytes[++i] & 0x3f) << 0);\n      if (chr >= 0x010000) { // surrogate pair\n        chr -= 0x010000;\n        string += String.fromCharCode((chr >>> 10) + 0xD800, (chr & 0x3FF) + 0xDC00);\n      } else {\n        string += String.fromCharCode(chr);\n      }\n      continue;\n    }\n\n    console.error('Invalid byte ' + byte.toString(16));\n    // (do not throw error to avoid server/client from crashing due to hack attemps)\n    // throw new Error('Invalid byte ' + byte.toString(16));\n  }\n  it.offset += length;\n  return string;\n}\n\nexport function int8 (bytes: BufferLike, it: Iterator) {\n    return uint8(bytes, it) << 24 >> 24;\n};\n\nexport function uint8 (bytes: BufferLike, it: Iterator) {\n    return bytes[it.offset++];\n};\n\nexport function int16 (bytes: BufferLike, it: Iterator) {\n    return uint16(bytes, it) << 16 >> 16;\n};\n\nexport function uint16 (bytes: BufferLike, it: Iterator) {\n    return bytes[it.offset++] | bytes[it.offset++] << 8;\n};\n\nexport function int32 (bytes: BufferLike, it: Iterator) {\n    return bytes[it.offset++] | bytes[it.offset++] << 8 | bytes[it.offset++] << 16 | bytes[it.offset++] << 24;\n};\n\nexport function uint32 (bytes: BufferLike, it: Iterator) {\n    return int32(bytes, it) >>> 0;\n};\n\nexport function float32(bytes: BufferLike, it: Iterator) {\n  return readFloat32(bytes, it);\n}\n\nexport function float64(bytes: BufferLike, it: Iterator) {\n  return readFloat64(bytes, it);\n}\n\nexport function int64(bytes: BufferLike, it: Iterator) {\n  const low = uint32(bytes, it);\n  const high = int32(bytes, it) * Math.pow(2, 32);\n  return high + low;\n};\n\nexport function uint64(bytes: BufferLike, it: Iterator) {\n  const low = uint32(bytes, it);\n  const high = uint32(bytes, it) * Math.pow(2, 32);\n  return high + low;\n};\n\n// force little endian to facilitate decoding on multiple implementations\nconst _isLittleEndian = true;  // new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\nconst _int32 = new Int32Array(2);\nconst _float32 = new Float32Array(_int32.buffer);\nconst _float64 = new Float64Array(_int32.buffer);\n\nexport function readFloat32 (bytes: BufferLike, it: Iterator) {\n    _int32[0] = int32(bytes, it);\n    return _float32[0];\n};\n\nexport function readFloat64 (bytes: BufferLike, it: Iterator) {\n    _int32[_isLittleEndian ? 0 : 1] = int32(bytes, it);\n    _int32[_isLittleEndian ? 1 : 0] = int32(bytes, it);\n    return _float64[0];\n};\n\nexport function boolean (bytes: BufferLike, it: Iterator) {\n    return uint8(bytes, it) > 0;\n};\n\nexport function string (bytes: BufferLike, it: Iterator) {\n  const prefix = bytes[it.offset++];\n  let length: number;\n\n  if (prefix < 0xc0) {\n    // fixstr\n    length = prefix & 0x1f;\n\n  } else if (prefix === 0xd9) {\n    length = uint8(bytes, it);\n\n  } else if (prefix === 0xda) {\n    length = uint16(bytes, it);\n\n  } else if (prefix === 0xdb) {\n    length = uint32(bytes, it);\n  }\n\n  return utf8Read(bytes, it, length);\n}\n\nexport function stringCheck(bytes: BufferLike, it: Iterator) {\n  const prefix = bytes[it.offset];\n  return (\n    // fixstr\n    (prefix < 0xc0 && prefix > 0xa0) ||\n    // str 8\n    prefix === 0xd9 ||\n    // str 16\n    prefix === 0xda ||\n    // str 32\n    prefix === 0xdb\n  );\n}\n\nexport function number (bytes: BufferLike, it: Iterator) {\n  const prefix = bytes[it.offset++];\n\n  if (prefix < 0x80) {\n    // positive fixint\n    return prefix;\n\n  } else if (prefix === 0xca) {\n    // float 32\n    return readFloat32(bytes, it);\n\n  } else if (prefix === 0xcb) {\n    // float 64\n    return readFloat64(bytes, it);\n\n  } else if (prefix === 0xcc) {\n    // uint 8\n    return uint8(bytes, it);\n\n  } else if (prefix === 0xcd) {\n    // uint 16\n    return uint16(bytes, it);\n\n  } else if (prefix === 0xce) {\n    // uint 32\n    return uint32(bytes, it);\n\n  } else if (prefix === 0xcf) {\n    // uint 64\n    return uint64(bytes, it);\n\n  } else if (prefix === 0xd0) {\n    // int 8\n    return int8(bytes, it);\n\n  } else if (prefix === 0xd1) {\n    // int 16\n    return int16(bytes, it);\n\n  } else if (prefix === 0xd2) {\n    // int 32\n    return int32(bytes, it);\n\n  } else if (prefix === 0xd3) {\n    // int 64\n    return int64(bytes, it);\n\n  } else if (prefix > 0xdf) {\n    // negative fixint\n    return (0xff - prefix + 1) * -1\n  }\n};\n\nexport function numberCheck (bytes: BufferLike, it: Iterator) {\n  const prefix = bytes[it.offset];\n  // positive fixint - 0x00 - 0x7f\n  // float 32        - 0xca\n  // float 64        - 0xcb\n  // uint 8          - 0xcc\n  // uint 16         - 0xcd\n  // uint 32         - 0xce\n  // uint 64         - 0xcf\n  // int 8           - 0xd0\n  // int 16          - 0xd1\n  // int 32          - 0xd2\n  // int 64          - 0xd3\n  return (\n    prefix < 0x80 ||\n    (prefix >= 0xca && prefix <= 0xd3)\n  );\n}\n\nexport function arrayCheck (bytes: BufferLike, it: Iterator) {\n  return bytes[it.offset] < 0xa0;\n\n  // const prefix = bytes[it.offset] ;\n\n  // if (prefix < 0xa0) {\n  //   return prefix;\n\n  // // array\n  // } else if (prefix === 0xdc) {\n  //   it.offset += 2;\n\n  // } else if (0xdd) {\n  //   it.offset += 4;\n  // }\n\n  // return prefix;\n}\n\nexport function switchStructureCheck(bytes: BufferLike, it: Iterator) {\n  return (\n      // previous byte should be `SWITCH_TO_STRUCTURE`\n      bytes[it.offset - 1] === SWITCH_TO_STRUCTURE &&\n      // next byte should be a number\n      (bytes[it.offset] < 0x80 || (bytes[it.offset] >= 0xca && bytes[it.offset] <= 0xd3))\n  );\n}","import { OPERATION } from \"../encoding/spec\";\nimport { Metadata } from \"../Metadata\";\nimport { Schema } from \"../Schema\";\nimport type { Ref } from \"../encoder/ChangeTree\";\nimport type { Decoder } from \"./Decoder\";\nimport * as decode from \"../encoding/decode\";\nimport { $childType, $deleteByIndex, $getByIndex } from \"../types/symbols\";\n\nimport type { MapSchema } from \"../types/custom/MapSchema\";\nimport type { ArraySchema } from \"../types/custom/ArraySchema\";\nimport type { CollectionSchema } from \"../types/custom/CollectionSchema\";\n\nimport { getType } from \"../types/registry\";\nimport { Collection } from \"../types/HelperTypes\";\n\nexport interface DataChange<T = any, F = string> {\n    ref: Ref,\n    refId: number,\n    op: OPERATION,\n    field: F;\n    dynamicIndex?: number | string;\n    value: T;\n    previousValue: T;\n}\n\nexport const DEFINITION_MISMATCH = -1;\n\nexport type DecodeOperation<T extends Schema = any> = (\n    decoder: Decoder<T>,\n    bytes: Buffer,\n    it: decode.Iterator,\n    ref: Ref,\n    allChanges: DataChange[],\n) => number | void;\n\nexport function decodeValue(\n    decoder: Decoder,\n    operation: OPERATION,\n    ref: Ref,\n    index: number,\n    type: any,\n    bytes: Buffer,\n    it: decode.Iterator,\n    allChanges: DataChange[],\n) {\n    const $root = decoder.root;\n    const previousValue = ref[$getByIndex](index);\n\n    let value: any;\n\n    if ((operation & OPERATION.DELETE) === OPERATION.DELETE)\n    {\n        // Flag `refId` for garbage collection.\n        const previousRefId = $root.refIds.get(previousValue);\n        if (previousRefId !== undefined) { $root.removeRef(previousRefId); }\n\n        //\n        // Delete operations\n        //\n        if (operation !== OPERATION.DELETE_AND_ADD) {\n            ref[$deleteByIndex](index);\n\n            // //\n            // // FIXME: is this in the correct place?\n            // //      (This is sounding like a workaround just for ArraySchema, see\n            // //       \"should splice and move\" test on ArraySchema.test.ts)\n            // //\n            // allChanges.push({\n            //     ref,\n            //     refId: decoder.currentRefId,\n            //     op: OPERATION.DELETE,\n            //     field: index as unknown as string,\n            //     value: undefined,\n            //     previousValue,\n            // });\n        }\n\n        value = null;\n    }\n\n    if (operation === OPERATION.DELETE) {\n        //\n        // Don't do anything\n        //\n\n    } else if (Schema.is(type)) {\n        const refId = decode.number(bytes, it);\n        value = $root.refs.get(refId);\n\n        if (previousValue) {\n            const previousRefId = $root.refIds.get(previousValue);\n            if (\n                previousRefId &&\n                refId !== previousRefId &&\n                // FIXME: we may need to check for REPLACE operation as well\n                ((operation & OPERATION.DELETE) === OPERATION.DELETE)\n            ) {\n                $root.removeRef(previousRefId);\n            }\n        }\n\n        if ((operation & OPERATION.ADD) === OPERATION.ADD) {\n            const childType = decoder.getInstanceType(bytes, it, type);\n            if (!value) {\n                value = decoder.createInstanceOfType(childType);\n            }\n\n            $root.addRef(refId, value, (value !== previousValue));\n        }\n\n\n    } else if (typeof(type) === \"string\") {\n        //\n        // primitive value (number, string, boolean, etc)\n        //\n        value = decode[type as string](bytes, it);\n\n    } else {\n        const typeDef = getType(Object.keys(type)[0]);\n        const refId = decode.number(bytes, it);\n\n        const valueRef: Ref = ($root.refs.has(refId))\n            ? previousValue || $root.refs.get(refId)\n            : new typeDef.constructor();\n\n        value = valueRef.clone(true);\n        value[$childType] = Object.values(type)[0]; // cache childType for ArraySchema and MapSchema\n\n        if (previousValue) {\n            let previousRefId = $root.refIds.get(previousValue);\n\n            if (previousRefId !== undefined && refId !== previousRefId) {\n                $root.removeRef(previousRefId);\n\n                //\n                // enqueue onRemove if structure has been replaced.\n                //\n                const entries: IterableIterator<[any, any]> = previousValue.entries();\n                let iter: IteratorResult<[any, any]>;\n                while ((iter = entries.next()) && !iter.done) {\n                    const [key, value] = iter.value;\n\n                    // if value is a schema, remove its reference\n                    // FIXME: not sure if this is necessary, add more tests to confirm\n                    if (typeof(value) === \"object\") {\n                        previousRefId = $root.refIds.get(value);\n                        $root.removeRef(previousRefId);\n                    }\n\n                    allChanges.push({\n                        ref: previousValue,\n                        refId: previousRefId,\n                        op: OPERATION.DELETE,\n                        field: key,\n                        value: undefined,\n                        previousValue: value,\n                    });\n                }\n\n            }\n        }\n\n        $root.addRef(refId, value, (valueRef !== previousValue));\n    }\n\n    return { value, previousValue };\n}\n\nexport const decodeSchemaOperation: DecodeOperation = function (\n    decoder: Decoder<any>,\n    bytes: Buffer,\n    it: decode.Iterator,\n    ref: Ref,\n    allChanges: DataChange[],\n) {\n    const first_byte = bytes[it.offset++];\n    const metadata: Metadata = ref['constructor'][Symbol.metadata];\n\n    // \"compressed\" index + operation\n    const operation = (first_byte >> 6) << 6\n    const index = first_byte % (operation || 255);\n\n    // skip early if field is not defined\n    const field = metadata[index];\n    if (field === undefined) { return DEFINITION_MISMATCH; }\n\n    const { value, previousValue } = decodeValue(\n        decoder,\n        operation,\n        ref,\n        index,\n        metadata[field].type,\n        bytes,\n        it,\n        allChanges,\n    );\n\n    if (value !== null && value !== undefined) {\n        ref[field] = value;\n    }\n\n    // add change\n    if (previousValue !== value) {\n        allChanges.push({\n            ref,\n            refId: decoder.currentRefId,\n            op: operation,\n            field: field,\n            value,\n            previousValue,\n        });\n    }\n}\n\nexport const decodeKeyValueOperation: DecodeOperation = function (\n    decoder: Decoder<any>,\n    bytes: Buffer,\n    it: decode.Iterator,\n    ref: Ref,\n    allChanges: DataChange[]\n) {\n    // \"uncompressed\" index + operation (array/map items)\n    const operation = bytes[it.offset++];\n\n    if (operation === OPERATION.CLEAR) {\n        //\n        // When decoding:\n        // - enqueue items for DELETE callback.\n        // - flag child items for garbage collection.\n        //\n        decoder.removeChildRefs(ref as unknown as Collection, allChanges);\n\n        (ref as any).clear();\n        return;\n    }\n\n    const index = decode.number(bytes, it);\n    const type = ref[$childType];\n\n    let dynamicIndex: number | string;\n\n    if ((operation & OPERATION.ADD) === OPERATION.ADD) { // ADD or DELETE_AND_ADD\n        if (typeof(ref['set']) === \"function\") {\n            dynamicIndex = decode.string(bytes, it); // MapSchema\n            ref['setIndex'](index, dynamicIndex);\n        } else {\n            dynamicIndex = index; // ArraySchema\n        }\n    } else {\n        // get dynamic index from \"ref\"\n        dynamicIndex = ref['getIndex'](index);\n    }\n\n\n    const { value, previousValue } = decodeValue(\n        decoder,\n        operation,\n        ref,\n        index,\n        type,\n        bytes,\n        it,\n        allChanges,\n    );\n\n    if (value !== null && value !== undefined) {\n        if (typeof(ref['set']) === \"function\") {\n            // MapSchema\n            (ref as MapSchema)['$items'].set(dynamicIndex as string, value);\n\n        } else if (typeof(ref['$setAt']) === \"function\") {\n            // ArraySchema\n            (ref as ArraySchema)['$setAt'](index, value, operation);\n\n        } else if (typeof(ref['add']) === \"function\") {\n            // CollectionSchema && SetSchema\n            const index = (ref as CollectionSchema).add(value);\n\n            if (typeof(index) === \"number\") {\n                ref['setIndex'](index, index);\n            }\n        }\n    }\n\n    // add change\n    if (previousValue !== value) {\n        allChanges.push({\n            ref,\n            refId: decoder.currentRefId,\n            op: operation,\n            field: \"\", // FIXME: remove this\n            dynamicIndex,\n            value,\n            previousValue,\n        });\n    }\n}\n\nexport const decodeArray: DecodeOperation = function (\n    decoder: Decoder<any>,\n    bytes: Buffer,\n    it: decode.Iterator,\n    ref: ArraySchema,\n    allChanges: DataChange[]\n) {\n    // \"uncompressed\" index + operation (array/map items)\n    let operation = bytes[it.offset++];\n\n    let isSchemaChild: boolean;\n    let index: number;\n\n    if (operation === OPERATION.CLEAR) {\n        //\n        // When decoding:\n        // - enqueue items for DELETE callback.\n        // - flag child items for garbage collection.\n        //\n        decoder.removeChildRefs(ref as unknown as Collection, allChanges);\n        (ref as ArraySchema).clear();\n        return;\n\n    } else if (operation === OPERATION.DELETE_BY_REFID) {\n        // TODO: refactor here, try to follow same flow as below\n        const refId = decode.number(bytes, it);\n        const previousValue = decoder.root.refs.get(refId);\n        index = ref.findIndex((value) => value === previousValue);\n        ref[$deleteByIndex](index);\n        allChanges.push({\n            ref,\n            refId: decoder.currentRefId,\n            op: OPERATION.DELETE,\n            field: \"\", // FIXME: remove this\n            dynamicIndex: index,\n            value: undefined,\n            previousValue,\n        });\n\n        return;\n\n    } else if (operation === OPERATION.ADD_BY_REFID) {\n        isSchemaChild = true;\n        // operation = OPERATION.ADD;\n\n        const refId = decode.number(bytes, it);\n        const itemByRefId = decoder.root.refs.get(refId);\n\n        // use existing index, or push new value\n        index = (itemByRefId)\n            ? ref.findIndex((value) => value === itemByRefId)\n            : ref.length;\n\n    } else {\n        isSchemaChild = false;\n        index = decode.number(bytes, it);\n    }\n\n    const type = ref[$childType];\n\n    let dynamicIndex: number | string = index;\n\n    const { value, previousValue } = decodeValue(\n        decoder,\n        operation,\n        ref,\n        index,\n        type,\n        bytes,\n        it,\n        allChanges,\n    );\n\n    if (\n        value !== null && value !== undefined &&\n        value !== previousValue // avoid setting same value twice (if index === 0 it will result in a \"unshift\" for ArraySchema)\n    ) {\n        // ArraySchema\n        (ref as ArraySchema)['$setAt'](index, value, operation);\n    }\n\n    // add change\n    if (previousValue !== value) {\n        allChanges.push({\n            ref,\n            refId: decoder.currentRefId,\n            op: operation,\n            field: \"\", // FIXME: remove this\n            dynamicIndex,\n            value,\n            previousValue,\n        });\n    }\n}","import { $changes, $childType, $decoder, $deleteByIndex, $onEncodeEnd, $encoder, $filter, $getByIndex, $onDecodeEnd, $isNew } from \"../symbols\";\nimport type { Schema } from \"../../Schema\";\nimport { ChangeTree } from \"../../encoder/ChangeTree\";\nimport { OPERATION } from \"../../encoding/spec\";\nimport { registerType } from \"../registry\";\nimport { Collection } from \"../HelperTypes\";\n\nimport { encodeArray } from \"../../encoder/EncodeOperation\";\nimport { decodeArray } from \"../../decoder/DecodeOperation\";\nimport type { StateView } from \"../../encoder/StateView\";\n\nconst DEFAULT_SORT = (a: any, b: any) => {\n    const A = a.toString();\n    const B = b.toString();\n    if (A < B) return -1;\n    else if (A > B) return 1;\n    else return 0\n}\n\nexport class ArraySchema<V = any> implements Array<V>, Collection<number, V> {\n    [n: number]: V;\n\n    protected items: V[] = [];\n    protected tmpItems: V[] = [];\n    protected deletedIndexes: {[index: number]: boolean} = {};\n\n    static [$encoder] = encodeArray;\n    static [$decoder] = decodeArray;\n\n    /**\n     * Determine if a property must be filtered.\n     * - If returns false, the property is NOT going to be encoded.\n     * - If returns true, the property is going to be encoded.\n     *\n     * Encoding with \"filters\" happens in two steps:\n     * - First, the encoder iterates over all \"not owned\" properties and encodes them.\n     * - Then, the encoder iterates over all \"owned\" properties per instance and encodes them.\n     */\n    static [$filter] (ref: ArraySchema, index: number, view: StateView) {\n        // console.log(\"ArraSchema[$filter] VIEW??\", !view)\n        return (\n            !view ||\n            typeof (ref[$childType]) === \"string\" ||\n            // view.items.has(ref[$getByIndex](index)[$changes])\n            view.items.has(ref['tmpItems'][index]?.[$changes])\n        );\n    }\n\n    static is(type: any) {\n        return (\n            // type format: [\"string\"]\n            Array.isArray(type) ||\n\n            // type format: { array: \"string\" }\n            (type['array'] !== undefined)\n        );\n    }\n\n    constructor (...items: V[]) {\n\n        Object.defineProperty(this, $childType, {\n            value: undefined,\n            enumerable: false,\n            writable: true,\n            configurable: true,\n        });\n\n        const proxy = new Proxy(this, {\n            get: (obj, prop) => {\n                if (\n                    typeof (prop) !== \"symbol\" &&\n                    !isNaN(prop as any) // https://stackoverflow.com/a/175787/892698\n                ) {\n                    return this.items[prop];\n\n                } else {\n                    return Reflect.get(obj, prop);\n                }\n            },\n\n            set: (obj, key, setValue) => {\n                if (typeof (key) !== \"symbol\" && !isNaN(key as any)) {\n                    if (setValue === undefined || setValue === null) {\n                        obj.$deleteAt(key as unknown as number);\n\n                    } else {\n                        if (setValue[$changes]) {\n                            if (obj.items[key as unknown as number] !== undefined) {\n                                if (setValue[$changes][$isNew]) {\n                                    this[$changes].indexedOperation(Number(key), OPERATION.MOVE_AND_ADD);\n\n                                } else {\n                                    if ((obj[$changes].getChange(Number(key)) & OPERATION.DELETE) === OPERATION.DELETE) {\n                                        this[$changes].indexedOperation(Number(key), OPERATION.DELETE_AND_MOVE);\n                                    } else {\n                                        this[$changes].indexedOperation(Number(key), OPERATION.MOVE);\n                                    }\n                                }\n                            } else if (setValue[$changes][$isNew]) {\n                                this[$changes].indexedOperation(Number(key), OPERATION.ADD);\n                            }\n                        } else {\n                            obj.$changeAt(Number(key), setValue);\n                        }\n\n                        this.items[key as unknown as number] = setValue;\n                        this.tmpItems[key as unknown as number] = setValue;\n                    }\n\n                    return true;\n                } else {\n                    return Reflect.set(obj, key, setValue);\n                }\n            },\n\n            deleteProperty: (obj, prop) => {\n                if (typeof (prop) === \"number\") {\n                    obj.$deleteAt(prop);\n\n                } else {\n                    delete obj[prop];\n                }\n\n                return true;\n            },\n\n            has: (obj, key) => {\n                if (typeof (key) !== \"symbol\" && !isNaN(Number(key))) {\n                    return Reflect.has(this.items, key);\n                }\n                return Reflect.has(obj, key)\n            }\n        });\n\n        this[$changes] = new ChangeTree(proxy);\n        this.push.apply(this, items);\n\n        return proxy;\n    }\n\n    set length (newLength: number) {\n        if (newLength === 0) {\n            this.clear();\n        } else if (newLength < this.items.length) {\n            this.splice(newLength, this.length - newLength);\n        } else {\n            console.warn(\"ArraySchema: can't set .length to a higher value than its length.\");\n        }\n    }\n\n    get length() {\n        return this.items.length;\n    }\n\n    push(...values: V[]) {\n        let length = this.tmpItems.length;\n\n        values.forEach((value, i) => {\n            // skip null values\n            if (value === undefined || value === null) {\n                return;\n            }\n\n            const changeTree = this[$changes];\n            changeTree.indexedOperation(length, OPERATION.ADD, this.items.length);\n            // changeTree.indexes[length] = length;\n\n            this.items.push(value);\n            this.tmpItems.push(value);\n\n            //\n            // set value's parent after the value is set\n            // (to avoid encoding \"refId\" operations before parent's \"ADD\" operation)\n            //\n            value[$changes]?.setParent(this, changeTree.root, length);\n\n            length++;\n        });\n\n        return length;\n    }\n\n    /**\n     * Removes the last element from an array and returns it.\n     */\n    pop(): V | undefined {\n        let index: number = -1;\n\n        // find last non-undefined index\n        for (let i = this.tmpItems.length - 1; i >= 0; i--) {\n            // if (this.tmpItems[i] !== undefined) {\n            if (this.deletedIndexes[i] !== true) {\n                index = i;\n                break;\n            }\n        }\n\n        if (index < 0) {\n            return undefined;\n        }\n\n        this[$changes].delete(index, undefined, this.items.length - 1);\n\n        // this.tmpItems[index] = undefined;\n        this.deletedIndexes[index] = true;\n\n        return this.items.pop();\n    }\n\n    at(index: number) {\n        // Allow negative indexing from the end\n        if (index < 0) index += this.length;\n        return this.items[index];\n    }\n\n    // encoding only\n    protected $changeAt(index: number, value: V) {\n        if (value === undefined || value === null) {\n            console.error(\"ArraySchema items cannot be null nor undefined; Use `deleteAt(index)` instead.\");\n            return;\n        }\n\n        // skip if the value is the same as cached.\n        if (this.items[index] === value) {\n            return;\n        }\n\n        const changeTree = this[$changes];\n        const operation = changeTree.indexes?.[index]?.op ?? OPERATION.ADD;\n\n        changeTree.change(index, operation);\n\n        //\n        // set value's parent after the value is set\n        // (to avoid encoding \"refId\" operations before parent's \"ADD\" operation)\n        //\n        value[$changes]?.setParent(this, changeTree.root, index);\n    }\n\n    // encoding only\n    protected $deleteAt(index: number, operation?: OPERATION) {\n        this[$changes].delete(index, operation);\n    }\n\n    // decoding only\n    protected $setAt(index: number, value: V, operation: OPERATION) {\n        if (\n            index === 0 &&\n            operation === OPERATION.ADD &&\n            this.items[index] !== undefined\n        ) {\n            // handle decoding unshift\n            this.items.unshift(value);\n\n        } else if (operation === OPERATION.DELETE_AND_MOVE) {\n            this.items.splice(index, 1);\n            this.items[index] = value;\n\n        } else {\n            this.items[index] = value;\n        }\n    }\n\n    clear() {\n        // skip if already clear\n        if (this.items.length === 0) { return; }\n\n        // discard previous operations.\n        const changeTree = this[$changes]\n\n        // discard children\n        changeTree.forEachChild((changeTree, _) => {\n            changeTree.discard(true);\n\n            //\n            // TODO: add tests with instance sharing + .clear()\n            // FIXME: this.root? is required because it is being called at decoding time.\n            //\n            // TODO: do not use [$changes] at decoding time.\n            //\n            changeTree.root?.changes.delete(changeTree);\n            changeTree.root?.allChanges.delete(changeTree);\n            changeTree.root?.allFilteredChanges.delete(changeTree);\n        });\n\n        changeTree.discard(true);\n        changeTree.operation(OPERATION.CLEAR);\n\n        this.items.length = 0;\n        this.tmpItems.length = 0;\n    }\n\n    /**\n     * Combines two or more arrays.\n     * @param items Additional items to add to the end of array1.\n     */\n    // @ts-ignore\n    concat(...items: (V | ConcatArray<V>)[]): ArraySchema<V> {\n        return new ArraySchema(...this.items.concat(...items));\n    }\n\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string {\n        return this.items.join(separator);\n    }\n\n    /**\n     * Reverses the elements in an Array.\n     */\n    // @ts-ignore\n    reverse(): ArraySchema<V> {\n        this[$changes].operation(OPERATION.REVERSE);\n        this.items.reverse();\n        this.tmpItems.reverse();\n        return this;\n    }\n\n    /**\n     * Removes the first element from an array and returns it.\n     */\n    shift(): V | undefined {\n        if (this.items.length === 0) { return undefined; }\n\n        // const index = Number(Object.keys(changeTree.indexes)[0]);\n        const index = this.tmpItems.findIndex((item, i) => item === this.items[0]);\n        const changeTree = this[$changes];\n\n        changeTree.delete(index);\n        changeTree.shiftAllChangeIndexes(-1, index);\n\n        return this.items.shift();\n    }\n\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\n     */\n    slice(start?: number, end?: number): V[] {\n        const sliced = new ArraySchema<V>();\n        sliced.push(...this.items.slice(start, end));\n        return sliced as unknown as V[];\n    }\n\n    /**\n     * Sorts an array.\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\n     * a negative value if first argument is less than second argument, zero if they're equal and a positive\n     * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\n     * ```ts\n     * [11,2,22,1].sort((a, b) => a - b)\n     * ```\n     */\n    sort(compareFn: (a: V, b: V) => number = DEFAULT_SORT): this {\n        const changeTree = this[$changes];\n        const sortedItems = this.items.sort(compareFn);\n\n        // wouldn't OPERATION.MOVE make more sense here?\n        sortedItems.forEach((_, i) => changeTree.change(i, OPERATION.REPLACE));\n\n        this.tmpItems.sort(compareFn);\n        return this;\n    }\n\n    /**\n     * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n     * @param start The zero-based location in the array from which to start removing elements.\n     * @param deleteCount The number of elements to remove.\n     * @param insertItems Elements to insert into the array in place of the deleted elements.\n     */\n    splice(\n        start: number,\n        deleteCount: number = this.items.length - start,\n        ...insertItems: V[]\n    ): V[] {\n        const changeTree = this[$changes];\n\n        const tmpItemsLength = this.tmpItems.length;\n        const insertCount = insertItems.length;\n\n        // build up-to-date list of indexes, excluding removed values.\n        const indexes: number[] = [];\n        for (let i = 0; i < tmpItemsLength; i++) {\n            // if (this.tmpItems[i] !== undefined) {\n            if (this.deletedIndexes[i] !== true) {\n                indexes.push(i);\n            }\n        }\n\n        // delete operations at correct index\n        for (let i = start; i < start + deleteCount; i++) {\n            const index = indexes[i];\n            changeTree.delete(index);\n            // this.tmpItems[index] = undefined;\n            this.deletedIndexes[index] = true;\n        }\n\n        // force insert operations\n        for (let i = 0; i < insertCount; i++) {\n            const addIndex = indexes[start] + i;\n            changeTree.indexedOperation(addIndex, OPERATION.ADD);\n\n            // set value's parent/root\n            insertItems[i][$changes]?.setParent(this, changeTree.root, addIndex);\n        }\n\n        //\n        // delete exceeding indexes from \"allChanges\"\n        // (prevent .encodeAll() from encoding non-existing items)\n        //\n        if (deleteCount > insertCount) {\n            changeTree.shiftAllChangeIndexes(-(deleteCount - insertCount), indexes[start + insertCount]);\n        }\n\n        return this.items.splice(start, deleteCount, ...insertItems);\n    }\n\n    /**\n     * Inserts new elements at the start of an array.\n     * @param items  Elements to insert at the start of the Array.\n     */\n    unshift(...items: V[]): number {\n        const changeTree = this[$changes];\n\n        // shift indexes\n        changeTree.shiftChangeIndexes(items.length);\n\n        // new index\n        if (changeTree.isFiltered) {\n            changeTree.filteredChanges.set(this.items.length, OPERATION.ADD);\n        } else {\n            changeTree.allChanges.set(this.items.length, OPERATION.ADD);\n        }\n\n        // FIXME: should we use OPERATION.MOVE here instead?\n        items.forEach((_, index) => {\n            changeTree.change(index, OPERATION.ADD)\n        });\n\n        this.tmpItems.unshift(...items);\n\n        return this.items.unshift(...items);\n    }\n\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\n     */\n    indexOf(searchElement: V, fromIndex?: number): number {\n        return this.items.indexOf(searchElement, fromIndex);\n    }\n\n    /**\n     * Returns the index of the last occurrence of a specified value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.\n     */\n    lastIndexOf(searchElement: V, fromIndex: number = this.length - 1): number {\n        return this.items.lastIndexOf(searchElement, fromIndex);\n    }\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param callbackfn A function that accepts up to three arguments. The every method calls\n     * the callbackfn function for each element in the array until the callbackfn returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every<S extends V>(predicate: (value: V, index: number, array: V[]) => value is S, thisArg?: any): this is S[];\n    every(callbackfn: (value: V, index: number, array: V[]) => unknown, thisArg?: any): boolean {\n        return this.items.every(callbackfn, thisArg);\n    }\n\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param callbackfn A function that accepts up to three arguments. The some method calls\n     * the callbackfn function for each element in the array until the callbackfn returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(callbackfn: (value: V, index: number, array: V[]) => unknown, thisArg?: any): boolean {\n        return this.items.some(callbackfn, thisArg);\n    }\n\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: V, index: number, array: V[]) => void, thisArg?: any): void {\n        return this.items.forEach(callbackfn, thisArg);\n    }\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n     */\n    map<U>(callbackfn: (value: V, index: number, array: V[]) => U, thisArg?: any): U[] {\n        return this.items.map(callbackfn, thisArg);\n    }\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(callbackfn: (value: V, index: number, array: V[]) => unknown, thisArg?: any): V[]\n    filter<S extends V>(callbackfn: (value: V, index: number, array: V[]) => value is S, thisArg?: any): V[] {\n        return this.items.filter(callbackfn, thisArg);\n    }\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduce<U=V>(callbackfn: (previousValue: U, currentValue: V, currentIndex: number, array: V[]) => U, initialValue?: U): U {\n        return this.items.reduce(callbackfn, initialValue);\n    }\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduceRight<U=V>(callbackfn: (previousValue: U, currentValue: V, currentIndex: number, array: V[]) => U, initialValue?: U): U {\n        return this.items.reduceRight(callbackfn, initialValue);\n    }\n\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: V, index: number, obj: V[]) => boolean, thisArg?: any): V | undefined {\n        return this.items.find(predicate, thisArg);\n    }\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: V, index: number, obj: V[]) => unknown, thisArg?: any): number {\n        return this.items.findIndex(predicate, thisArg);\n    }\n\n    /**\n     * Returns the this object after filling the section identified by start and end with value\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: V, start?: number, end?: number): this {\n        //\n        // TODO\n        //\n        throw new Error(\"ArraySchema#fill() not implemented\");\n        // this.$items.fill(value, start, end);\n\n        return this;\n    }\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this {\n        //\n        // TODO\n        //\n        throw new Error(\"ArraySchema#copyWithin() not implemented\");\n        return this;\n    }\n\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string {\n        return this.items.toString();\n    }\n\n    /**\n     * Returns a string representation of an array. The elements are converted to string using their toLocalString methods.\n     */\n    toLocaleString(): string {\n        return this.items.toLocaleString()\n    };\n\n    /** Iterator */\n    [Symbol.iterator](): IterableIterator<V> {\n        return this.items[Symbol.iterator]();\n    }\n\n    static get [Symbol.species]() {\n        return ArraySchema;\n    }\n\n    // WORKAROUND for compatibility\n    // - TypeScript 4 defines @@unscopables as a function\n    // - TypeScript 5 defines @@unscopables as an object\n    [Symbol.unscopables]: any;\n\n    /**\n     * Returns an iterable of key, value pairs for every entry in the array\n     */\n    entries(): IterableIterator<[number, V]> { return this.items.entries(); }\n\n    /**\n     * Returns an iterable of keys in the array\n     */\n    keys(): IterableIterator<number> { return this.items.keys(); }\n\n    /**\n     * Returns an iterable of values in the array\n     */\n    values(): IterableIterator<V> { return this.items.values(); }\n\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: V, fromIndex?: number): boolean {\n        return this.items.includes(searchElement, fromIndex);\n    }\n\n    //\n    // ES2022\n    //\n\n    /**\n     * Calls a defined callback function on each element of an array. Then, flattens the result into\n     * a new array.\n     * This is identical to a map followed by flat with depth 1.\n     *\n     * @param callback A function that accepts up to three arguments. The flatMap method calls the\n     * callback function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callback function. If\n     * thisArg is omitted, undefined is used as the this value.\n     */\n    // @ts-ignore\n    flatMap<U, This = undefined>(callback: (this: This, value: V, index: number, array: V[]) => U | ReadonlyArray<U>, thisArg?: This): U[] {\n        // @ts-ignore\n        throw new Error(\"ArraySchema#flatMap() is not supported.\");\n    }\n\n    /**\n     * Returns a new array with all sub-array elements concatenated into it recursively up to the\n     * specified depth.\n     *\n     * @param depth The maximum recursion depth\n     */\n    // @ts-ignore\n    flat<A, D extends number = 1>(this: A, depth?: D): any {\n        throw new Error(\"ArraySchema#flat() is not supported.\");\n    }\n\n    findLast() {\n        // @ts-ignore\n        return this.items.findLast.apply(this.items, arguments);\n    }\n\n    findLastIndex(...args) {\n        // @ts-ignore\n        return this.items.findLastIndex.apply(this.items, arguments);\n    }\n\n    //\n    // ES2023\n    //\n    with(index: number, value: V): ArraySchema<V> {\n        const copy = this.items.slice();\n        copy[index] = value;\n        return new ArraySchema(...copy);\n    }\n    toReversed(): V[] {\n        return this.items.slice().reverse();\n    }\n    toSorted(compareFn?: (a: V, b: V) => number): V[] {\n        return this.items.slice().sort(compareFn);\n    }\n    toSpliced(start: number, deleteCount: number, ...items: V[]): V[];\n    toSpliced(start: number, deleteCount?: number): V[];\n    // @ts-ignore\n    toSpliced(start: unknown, deleteCount?: unknown, ...items?: unknown[]): V[] {\n        // @ts-ignore\n        return this.items.toSpliced.apply(copy, arguments);\n    }\n\n    protected [$getByIndex](index: number, isEncodeAll: boolean = false) {\n        //\n        // TODO: avoid unecessary `this.tmpItems` check during decoding.\n        //\n        //    ENCODING uses `this.tmpItems` (or `this.items` if `isEncodeAll` is true)\n        //    DECODING uses `this.items`\n        //\n\n        return (isEncodeAll)\n            ? this.items[index]\n            : this.deletedIndexes[index]\n                ? this.items[index]\n                : this.tmpItems[index] || this.items[index];\n\n        // return (isEncodeAll)\n        //     ? this.items[index]\n        //     : this.tmpItems[index] ?? this.items[index];\n    }\n\n    protected [$deleteByIndex](index: number) {\n        this.items[index] = undefined;\n    }\n\n    protected [$onEncodeEnd]() {\n        this.tmpItems = this.items.slice();\n        this.deletedIndexes = {};\n    }\n\n    protected [$onDecodeEnd]() {\n        this.items = this.items.filter((item) => item !== undefined);\n    }\n\n    toArray() {\n        return this.items.slice(0);\n    }\n\n    toJSON() {\n        return this.toArray().map((value) => {\n            return (typeof (value['toJSON']) === \"function\")\n                ? value['toJSON']()\n                : value;\n        });\n    }\n\n    //\n    // Decoding utilities\n    //\n    clone(isDecoding?: boolean): ArraySchema<V> {\n        let cloned: ArraySchema;\n\n        if (isDecoding) {\n            cloned = new ArraySchema();\n            cloned.push(...this.items);\n\n        } else {\n            cloned = new ArraySchema(...this.map(item => (\n                (item[$changes])\n                    ? (item as any as Schema).clone()\n                    : item\n            )));\n        }\n\n        return cloned;\n    };\n\n}\n\nregisterType(\"array\", { constructor: ArraySchema });","import { $changes, $childType, $decoder, $deleteByIndex, $onEncodeEnd, $encoder, $filter, $getByIndex } from \"../symbols\";\nimport { ChangeTree } from \"../../encoder/ChangeTree\";\nimport { OPERATION } from \"../../encoding/spec\";\nimport { registerType } from \"../registry\";\nimport { Collection } from \"../HelperTypes\";\nimport { decodeKeyValueOperation } from \"../../decoder/DecodeOperation\";\nimport { encodeKeyValueOperation } from \"../../encoder/EncodeOperation\";\nimport type { StateView } from \"../../encoder/StateView\";\n\nexport class MapSchema<V=any, K extends string = string> implements Map<K, V>, Collection<K, V, [K, V]> {\n    protected childType: new () => V;\n\n    protected $items: Map<K, V> = new Map<K, V>();\n    protected $indexes: Map<number, K> = new Map<number, K>();\n\n    static [$encoder] = encodeKeyValueOperation;\n    static [$decoder] = decodeKeyValueOperation;\n\n    /**\n     * Determine if a property must be filtered.\n     * - If returns false, the property is NOT going to be encoded.\n     * - If returns true, the property is going to be encoded.\n     *\n     * Encoding with \"filters\" happens in two steps:\n     * - First, the encoder iterates over all \"not owned\" properties and encodes them.\n     * - Then, the encoder iterates over all \"owned\" properties per instance and encodes them.\n     */\n    static [$filter] (ref: MapSchema, index: number, view: StateView | undefined) {\n      if (!view) {\n        return true;\n      }\n\n      const exists = ref[$getByIndex](index) !== undefined;\n      const existsAndChanges = exists && view.items.has(ref[$getByIndex](index)[$changes])\n      return (\n          !view  ||\n          typeof (ref[$childType]) === \"string\" ||\n          existsAndChanges\n      );\n    }\n\n    static is(type: any) {\n        return type['map'] !== undefined;\n    }\n\n    constructor (initialValues?: Map<K, V> | Record<K, V>) {\n        this[$changes] = new ChangeTree(this);\n\n        if (initialValues) {\n            if (\n                initialValues instanceof Map ||\n                initialValues instanceof MapSchema\n            ) {\n                initialValues.forEach((v, k) => this.set(k, v));\n\n            } else {\n                for (const k in initialValues) {\n                    this.set(k, initialValues[k]);\n                }\n            }\n        }\n\n        Object.defineProperty(this, $childType, {\n            value: undefined,\n            enumerable: false,\n            writable: true,\n            configurable: true,\n        });\n    }\n\n    /** Iterator */\n    [Symbol.iterator](): IterableIterator<[K, V]> { return this.$items[Symbol.iterator](); }\n    get [Symbol.toStringTag]() { return this.$items[Symbol.toStringTag] }\n\n    static get [Symbol.species]() { return MapSchema; }\n\n    set(key: K, value: V) {\n        if (value === undefined || value === null) {\n            throw new Error(`MapSchema#set('${key}', ${value}): trying to set ${value} value on '${key}'.`);\n        }\n\n        // Force \"key\" as string\n        // See: https://github.com/colyseus/colyseus/issues/561#issuecomment-1646733468\n        key = key.toString() as K;\n\n        const changeTree = this[$changes];\n\n        // get \"index\" for this value.\n        const isReplace = typeof(changeTree.indexes[key]) !== \"undefined\";\n\n        const index = (isReplace)\n            ? changeTree.indexes[key]\n            : changeTree.indexes[-1] ?? 0;\n\n        let operation: OPERATION = (isReplace)\n            ? OPERATION.REPLACE\n            : OPERATION.ADD;\n\n        const isRef = (value[$changes]) !== undefined;\n\n        //\n        // (encoding)\n        // set a unique id to relate directly with this key/value.\n        //\n        if (!isReplace) {\n            this.$indexes.set(index, key);\n            changeTree.indexes[key] = index;\n            changeTree.indexes[-1] = index + 1;\n\n        } else if (\n            !isRef &&\n            this.$items.get(key) === value\n        ) {\n            // if value is the same, avoid re-encoding it.\n            return;\n\n        } else if (\n            isRef && // if is schema, force ADD operation if value differ from previous one.\n            this.$items.get(key) !== value\n        ) {\n            operation = OPERATION.ADD;\n        }\n\n        this.$items.set(key, value);\n\n        changeTree.change(index, operation);\n\n        //\n        // set value's parent after the value is set\n        // (to avoid encoding \"refId\" operations before parent's \"ADD\" operation)\n        //\n        if (isRef) {\n            value[$changes].setParent(this, changeTree.root, index);\n        }\n\n        return this;\n    }\n\n    get(key: K): V | undefined {\n        return this.$items.get(key);\n    }\n\n    delete(key: K) {\n        const index = this[$changes].indexes[key];\n\n        this[$changes].delete(index);\n\n        return this.$items.delete(key);\n    }\n\n    clear() {\n        const changeTree = this[$changes];\n\n        // discard previous operations.\n        changeTree.discard(true);\n        changeTree.indexes = {};\n\n        // clear previous indexes\n        this.$indexes.clear();\n\n        // clear items\n        this.$items.clear();\n\n        changeTree.operation(OPERATION.CLEAR);\n    }\n\n    has (key: K) {\n        return this.$items.has(key);\n    }\n\n    forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void) {\n        this.$items.forEach(callbackfn);\n    }\n\n    entries () {\n        return this.$items.entries();\n    }\n\n    keys () {\n        return this.$items.keys();\n    }\n\n    values() {\n        return this.$items.values();\n    }\n\n    get size () {\n        return this.$items.size;\n    }\n\n    protected setIndex(index: number, key: K) {\n        this.$indexes.set(index, key);\n    }\n\n    protected getIndex(index: number) {\n        return this.$indexes.get(index);\n    }\n\n    protected [$getByIndex](index: number) {\n        return this.$items.get(this.$indexes.get(index));\n    }\n\n    protected [$deleteByIndex](index: number) {\n        const key = this.$indexes.get(index);\n        this.$items.delete(key);\n        this.$indexes.delete(index);\n    }\n\n    protected [$onEncodeEnd]() {\n        const changeTree = this[$changes];\n        const changes = changeTree.changes.entries();\n        for (const [fieldIndex, operation] of changes) {\n            if (operation === OPERATION.DELETE) {\n                const index = this[$getByIndex](fieldIndex) as string;\n                delete changeTree.indexes[index];\n            }\n        }\n    }\n\n    toJSON() {\n        const map: any = {};\n\n        this.forEach((value, key) => {\n            map[key] = (typeof (value['toJSON']) === \"function\")\n                ? value['toJSON']()\n                : value;\n        });\n\n        return map;\n    }\n\n    //\n    // Decoding utilities\n    //\n    // @ts-ignore\n    clone(isDecoding?: boolean): MapSchema<V> {\n        let cloned: MapSchema<V>;\n\n        if (isDecoding) {\n            // client-side\n            cloned = Object.assign(new MapSchema(), this);\n\n        } else {\n            // server-side\n            cloned = new MapSchema();\n\n            this.forEach((value, key) => {\n                if (value[$changes]) {\n                    cloned.set(key, value['clone']());\n                } else {\n                    cloned.set(key, value);\n                }\n            })\n\n        }\n\n        return cloned;\n    }\n\n}\n\nregisterType(\"map\", { constructor: MapSchema });\n","import \"./symbol.shim\";\nimport { Schema } from './Schema';\nimport { ArraySchema } from './types/custom/ArraySchema';\nimport { MapSchema } from './types/custom/MapSchema';\nimport { Metadata } from \"./Metadata\";\nimport { $changes, $childType, $track } from \"./types/symbols\";\nimport { TypeDefinition, getType } from \"./types/registry\";\nimport { OPERATION } from \"./encoding/spec\";\n\n/**\n * Data types\n */\nexport type PrimitiveType =\n    \"string\" |\n    \"number\" |\n    \"boolean\" |\n    \"int8\" |\n    \"uint8\" |\n    \"int16\" |\n    \"uint16\" |\n    \"int32\" |\n    \"uint32\" |\n    \"int64\" |\n    \"uint64\" |\n    \"float32\" |\n    \"float64\" |\n    typeof Schema |\n    object;\n\nexport type DefinitionType = PrimitiveType\n    | PrimitiveType[]\n    | { array: PrimitiveType }\n    | { map: PrimitiveType }\n    | { collection: PrimitiveType }\n    | { set: PrimitiveType };\n\nexport type Definition = { [field: string]: DefinitionType };\n\nexport interface TypeOptions {\n    manual?: boolean,\n}\n\nexport const DEFAULT_VIEW_TAG = -1;\n\nexport class TypeContext {\n    types: {[id: number]: typeof Schema} = {};\n    schemas = new Map<typeof Schema, number>();\n\n    hasFilters: boolean = false;\n\n    /**\n     * For inheritance support\n     * Keeps track of which classes extends which. (parent -> children)\n     */\n    static inheritedTypes = new Map<typeof Schema, Set<typeof Schema>>();\n\n    static register(target: typeof Schema) {\n        const parent = Object.getPrototypeOf(target);\n        if (parent !== Schema) {\n            let inherits = TypeContext.inheritedTypes.get(parent);\n            if (!inherits) {\n                inherits = new Set<typeof Schema>();\n                TypeContext.inheritedTypes.set(parent, inherits);\n            }\n            inherits.add(target);\n        }\n    }\n\n    constructor(rootClass?: typeof Schema) {\n        if (rootClass) {\n            this.discoverTypes(rootClass);\n        }\n    }\n\n    has(schema: typeof Schema) {\n        return this.schemas.has(schema);\n    }\n\n    get(typeid: number) {\n        return this.types[typeid];\n    }\n\n    add(schema: typeof Schema, typeid: number = this.schemas.size) {\n        // skip if already registered\n        if (this.schemas.has(schema)) {\n            return false;\n        }\n\n        this.types[typeid] = schema;\n        this.schemas.set(schema, typeid);\n        return true;\n    }\n\n    getTypeId(klass: typeof Schema) {\n        return this.schemas.get(klass);\n    }\n\n    private discoverTypes(klass: typeof Schema) {\n        if (!this.add(klass)) {\n            return;\n        }\n\n        // add classes inherited from this base class\n        TypeContext.inheritedTypes.get(klass)?.forEach((child) => {\n            this.discoverTypes(child);\n        });\n\n        // skip if no fields are defined for this class.\n        if (klass[Symbol.metadata] === undefined) {\n            klass[Symbol.metadata] = {};\n        }\n\n        // const metadata = Metadata.getFor(klass);\n        const metadata = klass[Symbol.metadata];\n\n        // if any schema/field has filters, mark \"context\" as having filters.\n        if (metadata[-2]) {\n            this.hasFilters = true;\n        }\n\n        for (const field in metadata) {\n            const fieldType = metadata[field].type;\n\n            if (typeof(fieldType) === \"string\") {\n                continue;\n            }\n\n            if (Array.isArray(fieldType)) {\n                const type = fieldType[0];\n                if (type === \"string\") {\n                    continue;\n                }\n                this.discoverTypes(type as typeof Schema);\n\n            } else if (typeof(fieldType) === \"function\") {\n                this.discoverTypes(fieldType);\n\n            } else {\n                const type = Object.values(fieldType)[0];\n\n                // skip primitive types\n                if (typeof(type) === \"string\") {\n                    continue;\n                }\n\n                this.discoverTypes(type as typeof Schema);\n            }\n        }\n    }\n}\n\nexport function entity(constructor, context: ClassDecoratorContext) {\n    if (!constructor._definition) {\n        // for inheritance support\n        TypeContext.register(constructor);\n    }\n\n    return constructor;\n}\n\n/**\n * [See documentation](https://docs.colyseus.io/state/schema/)\n *\n * Annotate a Schema property to be serializeable.\n * \\@type()'d fields are automatically flagged as \"dirty\" for the next patch.\n *\n * @example Standard usage, with automatic change tracking.\n * ```\n * \\@type(\"string\") propertyName: string;\n * ```\n *\n * @example You can provide the \"manual\" option if you'd like to manually control your patches via .setDirty().\n * ```\n * \\@type(\"string\", { manual: true })\n * ```\n */\n// export function type(type: DefinitionType, options?: TypeOptions) {\n//     return function ({ get, set }, context: ClassAccessorDecoratorContext): ClassAccessorDecoratorResult<Schema, any> {\n//         if (context.kind !== \"accessor\") {\n//             throw new Error(\"@type() is only supported for class accessor properties\");\n//         }\n\n//         const field = context.name.toString();\n\n//         //\n//         // detect index for this field, considering inheritance\n//         //\n//         const parent = Object.getPrototypeOf(context.metadata);\n//         let fieldIndex: number = context.metadata[-1] // current structure already has fields defined\n//             ?? (parent && parent[-1]) // parent structure has fields defined\n//             ?? -1; // no fields defined\n//         fieldIndex++;\n\n//         if (\n//             !parent && // the parent already initializes the `$changes` property\n//             !Metadata.hasFields(context.metadata)\n//         ) {\n//             context.addInitializer(function (this: Ref) {\n//                 Object.defineProperty(this, $changes, {\n//                     value: new ChangeTree(this),\n//                     enumerable: false,\n//                     writable: true\n//                 });\n//             });\n//         }\n\n//         Metadata.addField(context.metadata, fieldIndex, field, type);\n\n//         const isArray = ArraySchema.is(type);\n//         const isMap = !isArray && MapSchema.is(type);\n\n//         // if (options && options.manual) {\n//         //     // do not declare getter/setter descriptor\n//         //     definition.descriptors[field] = {\n//         //         enumerable: true,\n//         //         configurable: true,\n//         //         writable: true,\n//         //     };\n//         //     return;\n//         // }\n\n//         return {\n//             init(value) {\n//                 // TODO: may need to convert ArraySchema/MapSchema here\n\n//                 // do not flag change if value is undefined.\n//                 if (value !== undefined) {\n//                     this[$changes].change(fieldIndex);\n\n//                     // automaticallty transform Array into ArraySchema\n//                     if (isArray) {\n//                         if (!(value instanceof ArraySchema)) {\n//                             value = new ArraySchema(...value);\n//                         }\n//                         value[$childType] = Object.values(type)[0];\n//                     }\n\n//                     // automaticallty transform Map into MapSchema\n//                     if (isMap) {\n//                         if (!(value instanceof MapSchema)) {\n//                             value = new MapSchema(value);\n//                         }\n//                         value[$childType] = Object.values(type)[0];\n//                     }\n\n//                     // try to turn provided structure into a Proxy\n//                     if (value['$proxy'] === undefined) {\n//                         if (isMap) {\n//                             value = getMapProxy(value);\n//                         }\n//                     }\n\n//                 }\n\n//                 return value;\n//             },\n\n//             get() {\n//                 return get.call(this);\n//             },\n\n//             set(value: any) {\n//                 /**\n//                  * Create Proxy for array or map items\n//                  */\n\n//                 // skip if value is the same as cached.\n//                 if (value === get.call(this)) {\n//                     return;\n//                 }\n\n//                 if (\n//                     value !== undefined &&\n//                     value !== null\n//                 ) {\n//                     // automaticallty transform Array into ArraySchema\n//                     if (isArray) {\n//                         if (!(value instanceof ArraySchema)) {\n//                             value = new ArraySchema(...value);\n//                         }\n//                         value[$childType] = Object.values(type)[0];\n//                     }\n\n//                     // automaticallty transform Map into MapSchema\n//                     if (isMap) {\n//                         if (!(value instanceof MapSchema)) {\n//                             value = new MapSchema(value);\n//                         }\n//                         value[$childType] = Object.values(type)[0];\n//                     }\n\n//                     // try to turn provided structure into a Proxy\n//                     if (value['$proxy'] === undefined) {\n//                         if (isMap) {\n//                             value = getMapProxy(value);\n//                         }\n//                     }\n\n//                     // flag the change for encoding.\n//                     this[$changes].change(fieldIndex);\n\n//                     //\n//                     // call setParent() recursively for this and its child\n//                     // structures.\n//                     //\n//                     if (value[$changes]) {\n//                         value[$changes].setParent(\n//                             this,\n//                             this[$changes].root,\n//                             Metadata.getIndex(context.metadata, field),\n//                         );\n//                     }\n\n//                 } else if (get.call(this)) {\n//                     //\n//                     // Setting a field to `null` or `undefined` will delete it.\n//                     //\n//                     this[$changes].delete(field);\n//                 }\n\n//                 set.call(this, value);\n//             },\n//         };\n//     }\n// }\n\nexport function view<T> (tag: number = DEFAULT_VIEW_TAG) {\n    return function(target: T, fieldName: string) {\n        const constructor = target.constructor as typeof Schema;\n\n        const parentClass = Object.getPrototypeOf(constructor);\n        const parentMetadata = parentClass[Symbol.metadata];\n\n        // TODO: use Metadata.initialize()\n        const metadata: Metadata = (constructor[Symbol.metadata] ??= Object.assign({}, constructor[Symbol.metadata], parentMetadata ?? Object.create(null)));\n\n        if (!metadata[fieldName]) {\n            //\n            // detect index for this field, considering inheritance\n            //\n            metadata[fieldName] = {\n                type: undefined,\n                index: (metadata[-1] // current structure already has fields defined\n                    ?? (parentMetadata && parentMetadata[-1]) // parent structure has fields defined\n                    ?? -1) + 1 // no fields defined\n            }\n        }\n\n        Metadata.setTag(metadata, fieldName, tag);\n    }\n}\n\nexport function unreliable<T> (target: T, field: string) {\n    //\n    // FIXME: the following block of code is repeated across `@type()`, `@deprecated()` and `@unreliable()` decorators.\n    //\n    const constructor = target.constructor as typeof Schema;\n\n    const parentClass = Object.getPrototypeOf(constructor);\n    const parentMetadata = parentClass[Symbol.metadata];\n\n    // TODO: use Metadata.initialize()\n    const metadata: Metadata = (constructor[Symbol.metadata] ??= Object.assign({}, constructor[Symbol.metadata], parentMetadata ?? Object.create(null)));\n\n    if (!metadata[field]) {\n        //\n        // detect index for this field, considering inheritance\n        //\n        metadata[field] = {\n            type: undefined,\n            index: (metadata[-1] // current structure already has fields defined\n                ?? (parentMetadata && parentMetadata[-1]) // parent structure has fields defined\n                ?? -1) + 1 // no fields defined\n        }\n    }\n\n    // add owned flag to the field\n    metadata[field].unreliable = true;\n}\n\nexport function type (\n    type: DefinitionType,\n    options?: TypeOptions\n): PropertyDecorator {\n    return function (target: typeof Schema, field: string) {\n        const constructor = target.constructor as typeof Schema;\n\n        if (!type) {\n            throw new Error(`${constructor.name}: @type() reference provided for \"${field}\" is undefined. Make sure you don't have any circular dependencies.`);\n        }\n\n        // for inheritance support\n        TypeContext.register(constructor);\n\n        const parentClass = Object.getPrototypeOf(constructor);\n        const parentMetadata = parentClass && parentClass[Symbol.metadata];\n        const metadata = Metadata.initialize(constructor, parentMetadata);\n\n        let fieldIndex: number;\n\n        /**\n         * skip if descriptor already exists for this field (`@deprecated()`)\n         */\n        if (metadata[field]) {\n            if (metadata[field].deprecated) {\n                // do not create accessors for deprecated properties.\n                return;\n\n            } else if (metadata[field].descriptor !== undefined) {\n                // trying to define same property multiple times across inheritance.\n                // https://github.com/colyseus/colyseus-unity3d/issues/131#issuecomment-814308572\n                try {\n                    throw new Error(`@colyseus/schema: Duplicate '${field}' definition on '${constructor.name}'.\\nCheck @type() annotation`);\n\n                } catch (e) {\n                    const definitionAtLine = e.stack.split(\"\\n\")[4].trim();\n                    throw new Error(`${e.message} ${definitionAtLine}`);\n                }\n\n            } else {\n                fieldIndex = metadata[field].index;\n            }\n\n        } else {\n            //\n            // detect index for this field, considering inheritance\n            //\n            fieldIndex = metadata[-1] // current structure already has fields defined\n                ?? (parentMetadata && parentMetadata[-1]) // parent structure has fields defined\n                ?? -1; // no fields defined\n            fieldIndex++;\n        }\n\n        if (options && options.manual) {\n            Metadata.addField(metadata, fieldIndex, field, type, {\n                // do not declare getter/setter descriptor\n                enumerable: true,\n                configurable: true,\n                writable: true,\n            });\n\n        } else {\n            const complexTypeKlass = (Array.isArray(type))\n                ? getType(\"array\")\n                : (typeof(Object.keys(type)[0]) === \"string\") && getType(Object.keys(type)[0]);\n\n            const childType = (complexTypeKlass)\n                ? Object.values(type)[0]\n                : type;\n\n            Metadata.addField(\n                metadata,\n                fieldIndex,\n                field,\n                type,\n                getPropertyDescriptor(`_${field}`, fieldIndex, childType, complexTypeKlass, metadata, field)\n            );\n        }\n    }\n}\n\nexport function getPropertyDescriptor(\n    fieldCached: string,\n    fieldIndex: number,\n    type: DefinitionType,\n    complexTypeKlass: TypeDefinition,\n    metadata: Metadata,\n    field: string,\n) {\n    return {\n        get: function () { return this[fieldCached]; },\n        set: function (this: Schema, value: any) {\n            const previousValue = this[fieldCached] || undefined;\n\n            // skip if value is the same as cached.\n            if (value === previousValue) { return; }\n\n            if (\n                value !== undefined &&\n                value !== null\n            ) {\n                if (complexTypeKlass) {\n                    // automaticallty transform Array into ArraySchema\n                    if (complexTypeKlass.constructor === ArraySchema && !(value instanceof ArraySchema)) {\n                        value = new ArraySchema(...value);\n                    }\n\n                    // automaticallty transform Map into MapSchema\n                    if (complexTypeKlass.constructor === MapSchema && !(value instanceof MapSchema)) {\n                        value = new MapSchema(value);\n                    }\n\n                    value[$childType] = type;\n                }\n\n                //\n                // Replacing existing \"ref\", remove it from root.\n                // TODO: if there are other references to this instance, we should not remove it from root.\n                //\n                if (previousValue !== undefined && previousValue[$changes]) {\n                    this[$changes].root?.remove(previousValue[$changes]);\n                }\n\n                // flag the change for encoding.\n                this.constructor[$track](this[$changes], fieldIndex, OPERATION.ADD);\n\n                //\n                // call setParent() recursively for this and its child\n                // structures.\n                //\n                if (value[$changes]) {\n                    value[$changes].setParent(\n                        this,\n                        this[$changes].root,\n                        metadata[field].index,\n                    );\n                }\n\n            } else if (previousValue !== undefined) {\n                //\n                // Setting a field to `null` or `undefined` will delete it.\n                //\n                this[$changes].delete(fieldIndex);\n            }\n\n            this[fieldCached] = value;\n        },\n\n        enumerable: true,\n        configurable: true\n    };\n}\n\n/**\n * `@deprecated()` flag a field as deprecated.\n * The previous `@type()` annotation should remain along with this one.\n */\n\nexport function deprecated(throws: boolean = true): PropertyDecorator {\n    return function (klass: typeof Schema, field: string) {\n        //\n        // FIXME: the following block of code is repeated across `@type()`, `@deprecated()` and `@unreliable()` decorators.\n        //\n        const constructor = klass.constructor as typeof Schema;\n\n        const parentClass = Object.getPrototypeOf(constructor);\n        const parentMetadata = parentClass[Symbol.metadata];\n        const metadata: Metadata = (constructor[Symbol.metadata] ??= Object.assign({}, constructor[Symbol.metadata], parentMetadata ?? Object.create(null)));\n\n        if (!metadata[field]) {\n            //\n            // detect index for this field, considering inheritance\n            //\n            metadata[field] = {\n                type: undefined,\n                index: (metadata[-1] // current structure already has fields defined\n                    ?? (parentMetadata && parentMetadata[-1]) // parent structure has fields defined\n                    ?? -1) + 1 // no fields defined\n            }\n        }\n\n        metadata[field].deprecated = true;\n\n        if (throws) {\n            metadata[field].descriptor = {\n                get: function () { throw new Error(`${field} is deprecated.`); },\n                set: function (this: Schema, value: any) { /* throw new Error(`${field} is deprecated.`); */ },\n                enumerable: false,\n                configurable: true\n            };\n        }\n\n        // flag metadata[field] as non-enumerable\n        Object.defineProperty(metadata, field, {\n            value: metadata[field],\n            enumerable: false,\n            configurable: true\n        });\n    }\n}\n\nexport function defineTypes(\n    target: typeof Schema,\n    fields: { [property: string]: DefinitionType },\n    options?: TypeOptions\n) {\n    for (let field in fields) {\n        type(fields[field], options)(target.prototype, field);\n    }\n    return target;\n}\n","import type { Schema } from \"./Schema\";\nimport { OPERATION } from \"./encoding/spec\";\nimport { $changes } from \"./types/symbols\";\n\ntype ChangeItem = [string, number | string, any?];\n\ninterface ChangeDump {\n    ops: {\n        ADD?: number;\n        REMOVE?: number;\n        REPLACE?: number;\n    },\n    refs: string[],\n}\n\nexport function getIndent(level: number) {\n    return (new Array(level).fill(0)).map((_, i) =>\n        (i === level - 1) ? `└─ ` : `   `\n    ).join(\"\");\n}\n\nexport function dumpChanges(schema: Schema) {\n    const $root = schema[$changes].root;\n\n    const dump: ChangeDump = {\n        ops: {},\n        refs: []\n    };\n\n    $root.changes.forEach((operations, changeTree) => {\n        dump.refs.push(`refId#${changeTree.refId}`);\n        operations.forEach((op, index) => {\n            const opName = OPERATION[op];\n            if (!dump.ops[opName]) { dump.ops[opName] = 0; }\n            dump.ops[OPERATION[op]]++;\n        });\n    });\n\n    return dump;\n}\n\nexport function getNextPowerOf2(number: number) {\n    // If number is already a power of 2, return it\n    if ((number & (number - 1)) === 0) {\n        return number;\n    }\n\n    // Find the position of the most significant bit\n    let msbPosition = 0;\n    while (number > 0) {\n        number >>= 1;\n        msbPosition++;\n    }\n\n    // Return the next power of 2\n    return 1 << msbPosition;\n}","import { OPERATION } from './encoding/spec';\nimport { DEFAULT_VIEW_TAG, DefinitionType } from \"./annotations\";\n\nimport { NonFunctionPropNames, ToJSON } from './types/HelperTypes';\n\nimport { ChangeTree, Ref } from './encoder/ChangeTree';\nimport { $changes, $decoder, $deleteByIndex, $encoder, $filter, $getByIndex, $track } from './types/symbols';\nimport { StateView } from './encoder/StateView';\n\nimport { encodeSchemaOperation } from './encoder/EncodeOperation';\nimport { decodeSchemaOperation } from './decoder/DecodeOperation';\nimport type { Metadata } from './Metadata';\nimport { getIndent } from './utils';\n\n/**\n * Schema encoder / decoder\n */\nexport abstract class Schema {\n\n    static [$encoder] = encodeSchemaOperation;\n    static [$decoder] = decodeSchemaOperation;\n\n    /**\n     * Assign the property descriptors required to track changes on this instance.\n     * @param instance\n     */\n    static initialize(instance: any) {\n        Object.defineProperty(instance, $changes, {\n            value: new ChangeTree(instance),\n            enumerable: false,\n            writable: true\n        });\n\n        const metadata = instance.constructor[Symbol.metadata];\n\n        // Define property descriptors\n        for (const field in metadata) {\n            if (metadata[field].descriptor) {\n                // for encoder\n                Object.defineProperty(instance, `_${field}`, {\n                    value: undefined,\n                    writable: true,\n                    enumerable: false,\n                    configurable: true,\n                });\n                Object.defineProperty(instance, field, metadata[field].descriptor);\n\n            } else {\n                // for decoder\n                Object.defineProperty(instance, field,  {\n                    value: undefined,\n                    writable: true,\n                    enumerable: true,\n                    configurable: true,\n                });\n            }\n\n            // Object.defineProperty(instance, field, {\n            //     ...instance.constructor[Symbol.metadata][field].descriptor\n            // });\n            // if (args[0]?.hasOwnProperty(field)) {\n            //     instance[field] = args[0][field];\n            // }\n        }\n    }\n\n    static is(type: DefinitionType) {\n        return typeof(type[Symbol.metadata]) === \"object\";\n        // const metadata = type[Symbol.metadata];\n        // return metadata && Object.prototype.hasOwnProperty.call(metadata, -1);\n    }\n\n    /**\n     * Track property changes\n     */\n    static [$track] (changeTree: ChangeTree, index: number, operation: OPERATION = OPERATION.ADD) {\n        changeTree.change(index, operation);\n    }\n\n    /**\n     * Determine if a property must be filtered.\n     * - If returns false, the property is NOT going to be encoded.\n     * - If returns true, the property is going to be encoded.\n     *\n     * Encoding with \"filters\" happens in two steps:\n     * - First, the encoder iterates over all \"not owned\" properties and encodes them.\n     * - Then, the encoder iterates over all \"owned\" properties per instance and encodes them.\n     */\n    static [$filter] (ref: Schema, index: number, view: StateView) {\n        const metadata: Metadata = ref.constructor[Symbol.metadata];\n        const tag = metadata[metadata[index]].tag;\n\n        if (view === undefined) {\n            // shared pass/encode: encode if doesn't have a tag\n            return tag === undefined;\n\n        } else if (tag === undefined) {\n            // view pass: no tag\n            return true;\n\n        } else if (tag === DEFAULT_VIEW_TAG) {\n            // view pass: default tag\n            return view.items.has(ref[$changes]);\n\n        } else {\n            // view pass: custom tag\n            const tags = view.tags?.get(ref[$changes]);\n            return tags && tags.has(tag);\n        }\n    }\n\n    // allow inherited classes to have a constructor\n    constructor(...args: any[]) {\n        Schema.initialize(this);\n\n        //\n        // Assign initial values\n        //\n        if (args[0]) {\n            this.assign(args[0]);\n        }\n    }\n\n    public assign(\n        props: { [prop in NonFunctionPropNames<this>]?: this[prop] } | ToJSON<this>,\n    ) {\n        Object.assign(this, props);\n        return this;\n    }\n\n    /**\n     * (Server-side): Flag a property to be encoded for the next patch.\n     * @param instance Schema instance\n     * @param property string representing the property name, or number representing the index of the property.\n     * @param operation OPERATION to perform (detected automatically)\n     */\n    public setDirty<K extends NonFunctionPropNames<this>>(property: K | number, operation?: OPERATION) {\n        this[$changes].change(\n            this.constructor[Symbol.metadata][property as string].index,\n            operation\n        );\n    }\n\n    clone (): this {\n        const cloned = new ((this as any).constructor);\n        const metadata = this.constructor[Symbol.metadata];\n\n        //\n        // TODO: clone all properties, not only annotated ones\n        //\n        // for (const field in this) {\n        for (const field in metadata) {\n            if (\n                typeof (this[field]) === \"object\" &&\n                typeof (this[field]?.clone) === \"function\"\n            ) {\n                // deep clone\n                cloned[field] = this[field].clone();\n\n            } else {\n                // primitive values\n                cloned[field] = this[field];\n            }\n        }\n        return cloned;\n    }\n\n    toJSON () {\n        const metadata = this.constructor[Symbol.metadata];\n\n        const obj: unknown = {};\n        for (const fieldName in metadata) {\n            const field = metadata[fieldName];\n            if (!field.deprecated && this[fieldName] !== null && typeof (this[fieldName]) !== \"undefined\") {\n                obj[fieldName] = (typeof (this[fieldName]['toJSON']) === \"function\")\n                    ? this[fieldName]['toJSON']()\n                    : this[fieldName];\n            }\n        }\n        return obj as ToJSON<typeof this>;\n    }\n\n    discardAllChanges() {\n        this[$changes].discardAll();\n    }\n\n    protected [$getByIndex](index: number) {\n        return this[this.constructor[Symbol.metadata][index]];\n    }\n\n    protected [$deleteByIndex](index: number) {\n        this[this.constructor[Symbol.metadata][index]] = undefined;\n    }\n\n    static debugRefIds(instance: Ref, jsonContents: boolean = true, level: number = 0) {\n        const ref = instance;\n        const changeTree = ref[$changes];\n\n        const contents = (jsonContents) ? ` - ${JSON.stringify(ref.toJSON())}` : \"\";\n\n        let output = \"\";\n        output += `${getIndent(level)}${ref.constructor.name} (${ref[$changes].refId})${contents}\\n`;\n\n        changeTree.forEachChild((childChangeTree) =>\n            output += this.debugRefIds(childChangeTree.ref, jsonContents, level + 1));\n\n        return output;\n    }\n\n    /**\n     * Return a string representation of the changes on a Schema instance.\n     * The list of changes is cleared after each encode.\n     *\n     * @param instance Schema instance\n     * @param isEncodeAll Return \"full encode\" instead of current change set.\n     * @returns\n     */\n    static debugChanges(instance: Ref, isEncodeAll: boolean = false) {\n        const changeTree = instance[$changes];\n\n        const changeSet = (isEncodeAll) ? changeTree.allChanges : changeTree.changes;\n        const changeSetName = (isEncodeAll) ? \"allChanges\" : \"changes\";\n\n        let output = `${instance.constructor.name} (${changeTree.refId}) -> .${changeSetName}:\\n`;\n\n        function dumpChangeSet(changeSet: Map<number, OPERATION>) {\n            Array.from(changeSet)\n                .sort((a, b) => a[0] - b[0])\n                .forEach(([index, operation]) =>\n                    output += `- [${index}]: ${OPERATION[operation]} (${JSON.stringify(changeTree.getValue(index, isEncodeAll))})\\n`\n                );\n        }\n\n        dumpChangeSet(changeSet);\n\n        // display filtered changes\n        if (!isEncodeAll && changeTree.filteredChanges?.size > 0) {\n            output += `${instance.constructor.name} (${changeTree.refId}) -> .filteredChanges:\\n`;\n            dumpChangeSet(changeTree.filteredChanges);\n        }\n\n        // display filtered changes\n        if (isEncodeAll && changeTree.allFilteredChanges?.size > 0) {\n            output += `${instance.constructor.name} (${changeTree.refId}) -> .allFilteredChanges:\\n`;\n            dumpChangeSet(changeTree.allFilteredChanges);\n        }\n\n        return output;\n    }\n\n    static debugChangesDeep(ref: Ref) {\n        let output = \"\";\n\n        const rootChangeTree = ref[$changes];\n        const changeTrees: Map<ChangeTree, ChangeTree[]> = new Map();\n\n        let totalInstances = 0;\n        let totalOperations = 0;\n\n        for (const [changeTree, changes] of (rootChangeTree.root.changes.entries())) {\n            let includeChangeTree = false;\n            let parentChangeTrees: ChangeTree[] = [];\n            let parentChangeTree = changeTree.parent?.[$changes];\n\n            if (changeTree === rootChangeTree) {\n                includeChangeTree = true;\n\n            } else {\n                while (parentChangeTree !== undefined) {\n                    parentChangeTrees.push(parentChangeTree);\n                    if (parentChangeTree.ref === ref) {\n                        includeChangeTree = true;\n                        break;\n                    }\n                    parentChangeTree = parentChangeTree.parent?.[$changes];\n                }\n            }\n\n            if (includeChangeTree) {\n                totalInstances += 1;\n                totalOperations += changes.size;\n                changeTrees.set(changeTree, parentChangeTrees.reverse());\n            }\n        }\n\n        output += \"---\\n\"\n        output += `root refId: ${rootChangeTree.refId}\\n`;\n        output += `Total instances: ${totalInstances}\\n`;\n        output += `Total changes: ${totalOperations}\\n`;\n        output += \"---\\n\"\n\n        // based on root.changes, display a tree of changes that has the \"ref\" instance as parent\n        const visitedParents = new WeakSet<ChangeTree>();\n        for (const [changeTree, parentChangeTrees] of changeTrees.entries()) {\n            parentChangeTrees.forEach((parentChangeTree, level) => {\n                if (!visitedParents.has(parentChangeTree)) {\n                    output += `${getIndent(level)}${parentChangeTree.ref.constructor.name} (refId: ${parentChangeTree.refId})\\n`;\n                    visitedParents.add(parentChangeTree);\n                }\n            });\n\n            const changes = changeTree.changes;\n            const level = parentChangeTrees.length;\n            const indent = getIndent(level);\n\n            const parentIndex = (level > 0) ? `(${changeTree.parentIndex}) ` : \"\";\n            output += `${indent}${parentIndex}${changeTree.ref.constructor.name} (refId: ${changeTree.refId}) - changes: ${changes.size}\\n`;\n\n            for (const [index, operation] of changes) {\n                output += `${getIndent(level + 1)}${OPERATION[operation]}: ${index}\\n`;\n            }\n\n        }\n\n        return `${output}`;\n    }\n\n\n}\n\n","import { $changes, $childType, $decoder, $deleteByIndex, $encoder, $filter, $getByIndex } from \"../symbols\";\nimport { ChangeTree } from \"../../encoder/ChangeTree\";\nimport { OPERATION } from \"../../encoding/spec\";\nimport { registerType } from \"../registry\";\nimport { Collection } from \"../HelperTypes\";\nimport { decodeKeyValueOperation } from \"../../decoder/DecodeOperation\";\nimport { encodeKeyValueOperation } from \"../../encoder/EncodeOperation\";\nimport type { StateView } from \"../../encoder/StateView\";\n\ntype K = number; // TODO: allow to specify K generic on MapSchema.\n\nexport class CollectionSchema<V=any> implements Collection<K, V>{\n    protected $items: Map<number, V> = new Map<number, V>();\n    protected $indexes: Map<number, number> = new Map<number, number>();\n\n    protected $refId: number = 0;\n\n    static [$encoder] = encodeKeyValueOperation;\n    static [$decoder] = decodeKeyValueOperation;\n\n    /**\n     * Determine if a property must be filtered.\n     * - If returns false, the property is NOT going to be encoded.\n     * - If returns true, the property is going to be encoded.\n     *\n     * Encoding with \"filters\" happens in two steps:\n     * - First, the encoder iterates over all \"not owned\" properties and encodes them.\n     * - Then, the encoder iterates over all \"owned\" properties per instance and encodes them.\n     */\n    static [$filter] (ref: CollectionSchema, index: number, view: StateView) {\n        return (\n            !view ||\n            typeof (ref[$childType]) === \"string\" ||\n            view.items.has(ref[$getByIndex](index)[$changes])\n        );\n    }\n\n    static is(type: any) {\n        return type['collection'] !== undefined;\n    }\n\n    constructor (initialValues?: Array<V>) {\n        this[$changes] = new ChangeTree(this);\n\n        if (initialValues) {\n            initialValues.forEach((v) => this.add(v));\n        }\n\n        Object.defineProperty(this, $childType, {\n            value: undefined,\n            enumerable: false,\n            writable: true,\n            configurable: true,\n        });\n    }\n\n    add(value: V) {\n        // set \"index\" for reference.\n        const index = this.$refId++;\n\n        const isRef = (value[$changes]) !== undefined;\n        if (isRef) {\n            value[$changes].setParent(this, this[$changes].root, index);\n        }\n\n        this[$changes].indexes[index] = index;\n\n        this.$indexes.set(index, index);\n        this.$items.set(index, value);\n\n        this[$changes].change(index);\n\n        return index;\n    }\n\n    at(index: number): V | undefined {\n        const key = Array.from(this.$items.keys())[index];\n        return this.$items.get(key);\n    }\n\n    entries() {\n        return this.$items.entries();\n    }\n\n    delete(item: V) {\n        const entries = this.$items.entries();\n\n        let index: K;\n        let entry: IteratorResult<[number, V]>;\n        while (entry = entries.next()) {\n            if (entry.done) { break; }\n\n            if (item === entry.value[1]) {\n                index = entry.value[0];\n                break;\n            }\n        }\n\n        if (index === undefined) {\n            return false;\n        }\n\n        this[$changes].delete(index);\n        this.$indexes.delete(index);\n\n        return this.$items.delete(index);\n    }\n\n    clear() {\n        const changeTree = this[$changes];\n\n        // discard previous operations.\n        changeTree.discard(true);\n        changeTree.indexes = {};\n\n        // clear previous indexes\n        this.$indexes.clear();\n\n        // clear items\n        this.$items.clear();\n\n        changeTree.operation(OPERATION.CLEAR);\n    }\n\n    has (value: V): boolean {\n        return Array.from(this.$items.values()).some((v) => v === value);\n    }\n\n    forEach(callbackfn: (value: V, key: K, collection: CollectionSchema<V>) => void) {\n        this.$items.forEach((value, key, _) => callbackfn(value, key, this));\n    }\n\n    values() {\n        return this.$items.values();\n    }\n\n    get size () {\n        return this.$items.size;\n    }\n\n    /** Iterator */\n    [Symbol.iterator](): IterableIterator<V> {\n        return this.$items.values();\n    }\n\n    protected setIndex(index: number, key: number) {\n        this.$indexes.set(index, key);\n    }\n\n    protected getIndex(index: number) {\n        return this.$indexes.get(index);\n    }\n\n    protected [$getByIndex](index: number) {\n        return this.$items.get(this.$indexes.get(index));\n    }\n\n    protected [$deleteByIndex](index: number) {\n        const key = this.$indexes.get(index);\n        this.$items.delete(key);\n        this.$indexes.delete(index);\n    }\n\n    toArray() {\n        return Array.from(this.$items.values());\n    }\n\n    toJSON() {\n        const values: V[] = [];\n\n        this.forEach((value, key) => {\n            values.push(\n                (typeof (value['toJSON']) === \"function\")\n                    ? value['toJSON']()\n                    : value\n            );\n        });\n\n        return values;\n    }\n\n    //\n    // Decoding utilities\n    //\n    clone(isDecoding?: boolean): CollectionSchema<V> {\n        let cloned: CollectionSchema;\n\n        if (isDecoding) {\n            // client-side\n            cloned = Object.assign(new CollectionSchema(), this);\n\n        } else {\n            // server-side\n            cloned = new CollectionSchema();\n            this.forEach((value) => {\n                if (value[$changes]) {\n                    cloned.add(value['clone']());\n                } else {\n                    cloned.add(value);\n                }\n            })\n        }\n\n        return cloned;\n    }\n\n}\n\nregisterType(\"collection\", { constructor: CollectionSchema, });","import { OPERATION } from \"../../encoding/spec\";\nimport { registerType } from \"../registry\";\nimport { $changes, $childType, $decoder, $deleteByIndex, $encoder, $filter, $getByIndex } from \"../symbols\";\nimport { Collection } from \"../HelperTypes\";\nimport { ChangeTree } from \"../../encoder/ChangeTree\";\nimport { encodeKeyValueOperation } from \"../../encoder/EncodeOperation\";\nimport { decodeKeyValueOperation } from \"../../decoder/DecodeOperation\";\nimport type { StateView } from \"../../encoder/StateView\";\n\nexport class SetSchema<V=any> implements Collection<number, V> {\n\n    protected $items: Map<number, V> = new Map<number, V>();\n    protected $indexes: Map<number, number> = new Map<number, number>();\n\n    protected $refId: number = 0;\n\n    static [$encoder] = encodeKeyValueOperation;\n    static [$decoder] = decodeKeyValueOperation;\n\n    /**\n     * Determine if a property must be filtered.\n     * - If returns false, the property is NOT going to be encoded.\n     * - If returns true, the property is going to be encoded.\n     *\n     * Encoding with \"filters\" happens in two steps:\n     * - First, the encoder iterates over all \"not owned\" properties and encodes them.\n     * - Then, the encoder iterates over all \"owned\" properties per instance and encodes them.\n     */\n    static [$filter] (ref: SetSchema, index: number, view: StateView) {\n        return (\n            !view ||\n            typeof (ref[$childType]) === \"string\" ||\n            view.items.has(ref[$getByIndex](index)[$changes])\n        );\n    }\n\n    static is(type: any) {\n        return type['set'] !== undefined;\n    }\n\n    constructor (initialValues?: Array<V>) {\n        this[$changes] = new ChangeTree(this);\n\n        if (initialValues) {\n            initialValues.forEach((v) => this.add(v));\n        }\n\n        Object.defineProperty(this, $childType, {\n            value: undefined,\n            enumerable: false,\n            writable: true,\n            configurable: true,\n        });\n    }\n\n    add(value: V) {\n        // immediatelly return false if value already added.\n        if (this.has(value)) { return false; }\n\n        // set \"index\" for reference.\n        const index = this.$refId++;\n\n        if ((value[$changes]) !== undefined) {\n            value[$changes].setParent(this, this[$changes].root, index);\n        }\n\n        const operation = this[$changes].indexes[index]?.op ?? OPERATION.ADD;\n\n        this[$changes].indexes[index] = index;\n\n        this.$indexes.set(index, index);\n        this.$items.set(index, value);\n\n        this[$changes].change(index, operation);\n        return index;\n    }\n\n    entries () {\n        return this.$items.entries();\n    }\n\n    delete(item: V) {\n        const entries = this.$items.entries();\n\n        let index: number;\n        let entry: IteratorResult<[number, V]>;\n        while (entry = entries.next()) {\n            if (entry.done) { break; }\n\n            if (item === entry.value[1]) {\n                index = entry.value[0];\n                break;\n            }\n        }\n\n        if (index === undefined) {\n            return false;\n        }\n\n        this[$changes].delete(index);\n        this.$indexes.delete(index);\n\n        return this.$items.delete(index);\n    }\n\n    clear() {\n        const changeTree = this[$changes];\n\n        // discard previous operations.\n        changeTree.discard(true);\n        changeTree.indexes = {};\n\n        // clear previous indexes\n        this.$indexes.clear();\n\n        // clear items\n        this.$items.clear();\n\n        changeTree.operation(OPERATION.CLEAR);\n    }\n\n    has (value: V): boolean {\n        const values = this.$items.values();\n\n        let has = false;\n        let entry: IteratorResult<V>;\n\n        while (entry = values.next()) {\n            if (entry.done) { break; }\n            if (value === entry.value) {\n                has = true;\n                break;\n            }\n        }\n\n        return has;\n    }\n\n    forEach(callbackfn: (value: V, key: number, collection: SetSchema<V>) => void) {\n        this.$items.forEach((value, key, _) => callbackfn(value, key, this));\n    }\n\n    values() {\n        return this.$items.values();\n    }\n\n    get size () {\n        return this.$items.size;\n    }\n\n    /** Iterator */\n    [Symbol.iterator](): IterableIterator<V> {\n        return this.$items.values();\n    }\n\n    protected setIndex(index: number, key: number) {\n        this.$indexes.set(index, key);\n    }\n\n    protected getIndex(index: number) {\n        return this.$indexes.get(index);\n    }\n\n    protected [$getByIndex](index: number) {\n        return this.$items.get(this.$indexes.get(index));\n    }\n\n    protected [$deleteByIndex](index: number) {\n        const key = this.$indexes.get(index);\n        this.$items.delete(key);\n        this.$indexes.delete(index);\n    }\n\n    toArray() {\n        return Array.from(this.$items.values());\n    }\n\n    toJSON() {\n        const values: V[] = [];\n\n        this.forEach((value, key) => {\n            values.push(\n                (typeof (value['toJSON']) === \"function\")\n                    ? value['toJSON']()\n                    : value\n            );\n        });\n\n        return values;\n    }\n\n    //\n    // Decoding utilities\n    //\n    clone(isDecoding?: boolean): SetSchema<V> {\n        let cloned: SetSchema;\n\n        if (isDecoding) {\n            // client-side\n            cloned = Object.assign(new SetSchema(), this);\n\n        } else {\n            // server-side\n            cloned = new SetSchema();\n            this.forEach((value) => {\n                if (value[$changes]) {\n                    cloned.add(value['clone']());\n                } else {\n                    cloned.add(value);\n                }\n            })\n        }\n\n        return cloned;\n    }\n\n}\n\nregisterType(\"set\", { constructor: SetSchema });","/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.unshift(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.unshift(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\r\n    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n\r\nexport function __addDisposableResource(env, value, async) {\r\n    if (value !== null && value !== void 0) {\r\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\r\n        var dispose, inner;\r\n        if (async) {\r\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\r\n            dispose = value[Symbol.asyncDispose];\r\n        }\r\n        if (dispose === void 0) {\r\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\r\n            dispose = value[Symbol.dispose];\r\n            if (async) inner = dispose;\r\n        }\r\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\r\n        if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\r\n        env.stack.push({ value: value, dispose: dispose, async: async });\r\n    }\r\n    else if (async) {\r\n        env.stack.push({ async: true });\r\n    }\r\n    return value;\r\n\r\n}\r\n\r\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\r\n\r\nexport function __disposeResources(env) {\r\n    function fail(e) {\r\n        env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\r\n        env.hasError = true;\r\n    }\r\n    function next() {\r\n        while (env.stack.length) {\r\n            var rec = env.stack.pop();\r\n            try {\r\n                var result = rec.dispose && rec.dispose.call(rec.value);\r\n                if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\r\n            }\r\n            catch (e) {\r\n                fail(e);\r\n            }\r\n        }\r\n        if (env.hasError) throw env.error;\r\n    }\r\n    return next();\r\n}\r\n\r\nexport default {\r\n    __extends: __extends,\r\n    __assign: __assign,\r\n    __rest: __rest,\r\n    __decorate: __decorate,\r\n    __param: __param,\r\n    __metadata: __metadata,\r\n    __awaiter: __awaiter,\r\n    __generator: __generator,\r\n    __createBinding: __createBinding,\r\n    __exportStar: __exportStar,\r\n    __values: __values,\r\n    __read: __read,\r\n    __spread: __spread,\r\n    __spreadArrays: __spreadArrays,\r\n    __spreadArray: __spreadArray,\r\n    __await: __await,\r\n    __asyncGenerator: __asyncGenerator,\r\n    __asyncDelegator: __asyncDelegator,\r\n    __asyncValues: __asyncValues,\r\n    __makeTemplateObject: __makeTemplateObject,\r\n    __importStar: __importStar,\r\n    __importDefault: __importDefault,\r\n    __classPrivateFieldGet: __classPrivateFieldGet,\r\n    __classPrivateFieldSet: __classPrivateFieldSet,\r\n    __classPrivateFieldIn: __classPrivateFieldIn,\r\n    __addDisposableResource: __addDisposableResource,\r\n    __disposeResources: __disposeResources,\r\n};\r\n","import type { Schema } from \"../Schema\";\nimport { TypeContext } from \"../annotations\";\nimport { $changes, $encoder, $filter } from \"../types/symbols\";\n\nimport * as encode from \"../encoding/encode\";\nimport type { Iterator } from \"../encoding/decode\";\n\nimport { OPERATION, SWITCH_TO_STRUCTURE, TYPE_ID } from '../encoding/spec';\nimport { Root } from \"./ChangeTree\";\nimport { getNextPowerOf2 } from \"../utils\";\nimport type { StateView } from \"./StateView\";\nimport { Metadata } from \"../Metadata\";\n\nexport class Encoder<T extends Schema = any> {\n    static BUFFER_SIZE = 8 * 1024;// 8KB\n    sharedBuffer = Buffer.allocUnsafeSlow(Encoder.BUFFER_SIZE);\n\n    context: TypeContext;\n    state: T;\n\n    root: Root;\n\n    constructor(root: T) {\n        this.setRoot(root);\n\n        //\n        // TODO: cache and restore \"Context\" based on root schema\n        // (to avoid creating a new context for every new room)\n        //\n        this.context = new TypeContext(root.constructor as typeof Schema);\n\n        // console.log(\">>>>>>>>>>>>>>>> Encoder types\");\n        // this.context.schemas.forEach((id, schema) => {\n        //     console.log(\"type:\", id, schema.name, Object.keys(schema[Symbol.metadata]));\n        // });\n    }\n\n    protected setRoot(state: T) {\n        this.root = new Root();\n        this.state = state;\n\n        // Workaround to allow using an empty Schema.\n        if (state.constructor[Symbol.metadata] === undefined) {\n            Metadata.init(state);\n        }\n\n        state[$changes].setRoot(this.root);\n    }\n\n    encode(\n        it: Iterator = { offset: 0 },\n        view?: StateView,\n        buffer = this.sharedBuffer,\n        changeTrees = this.root.changes,\n        isEncodeAll = this.root.allChanges === changeTrees,\n    ): Buffer {\n        const initialOffset = it.offset; // cache current offset in case we need to resize the buffer\n\n        const hasView = (view !== undefined);\n        const rootChangeTree = this.state[$changes];\n\n        const changeTreesIterator = changeTrees.entries();\n\n        for (const [changeTree, changes] of changeTreesIterator) {\n            const ref = changeTree.ref;\n\n            const ctor = ref['constructor'];\n            const encoder = ctor[$encoder];\n            const filter = ctor[$filter];\n\n            // try { throw new Error(); } catch (e) {\n            //     // only print if not coming from Reflection.ts\n            //     if (!e.stack.includes(\"src/Reflection.ts\")) {\n            //         console.log(\"ChangeTree:\", { ref: ref.constructor.name, });\n            //     }\n            // }\n\n            if (hasView) {\n                if (!view.items.has(changeTree)) {\n                    view.invisible.add(changeTree);\n                    continue; // skip this change tree\n\n                } else if (view.invisible.has(changeTree)) {\n                    view.invisible.delete(changeTree); // remove from invisible list\n                }\n            }\n\n            // skip root `refId` if it's the first change tree\n            if (it.offset !== initialOffset || changeTree !== rootChangeTree) {\n                buffer[it.offset++] = SWITCH_TO_STRUCTURE & 255;\n                encode.number(buffer, changeTree.refId, it);\n            }\n\n            const changesIterator = changes.entries();\n\n            for (const [fieldIndex, operation] of changesIterator) {\n                //\n                // first pass (encodeAll), identify \"filtered\" operations without encoding them\n                // they will be encoded per client, based on their view.\n                //\n                // TODO: how can we optimize filtering out \"encode all\" operations?\n                // TODO: avoid checking if no view tags were defined\n                //\n                if (filter && !filter(ref, fieldIndex, view)) {\n                    // console.log(\"SKIP FIELD:\", { ref: changeTree.ref.constructor.name, fieldIndex, })\n\n                    // console.log(\"ADD AS INVISIBLE:\", fieldIndex, changeTree.ref.constructor.name)\n                    // view?.invisible.add(changeTree);\n                    continue;\n                }\n\n                // try { throw new Error(); } catch (e) {\n                //     // only print if not coming from Reflection.ts\n                //     if (!e.stack.includes(\"src/Reflection.ts\")) {\n                //         console.log(\"WILL ENCODE\", {\n                //             ref: changeTree.ref.constructor.name,\n                //             fieldIndex,\n                //             operation: OPERATION[operation],\n                //         });\n                //     }\n                // }\n\n                encoder(this, buffer, changeTree, fieldIndex, operation, it, isEncodeAll, hasView);\n            }\n        }\n\n        if (it.offset > buffer.byteLength) {\n            const newSize = getNextPowerOf2(buffer.byteLength * 2);\n            console.warn(`@colyseus/schema buffer overflow. Encoded state is higher than default BUFFER_SIZE. Use the following to increase default BUFFER_SIZE:\n\n    import { Encoder } from \"@colyseus/schema\";\n    Encoder.BUFFER_SIZE = ${Math.round(newSize / 1024)} * 1024; // ${Math.round(newSize / 1024)} KB\n`);\n\n\n            //\n            // resize buffer and re-encode (TODO: can we avoid re-encoding here?)\n            //\n            buffer = Buffer.allocUnsafeSlow(newSize);\n\n            // assign resized buffer to local sharedBuffer\n            if (buffer === this.sharedBuffer) {\n                this.sharedBuffer = buffer;\n            }\n\n            return this.encode({ offset: initialOffset }, view, buffer, changeTrees, isEncodeAll);\n\n        } else {\n            //\n            // only clear changes after making sure buffer resize is not required.\n            //\n            if (!isEncodeAll && !hasView) {\n                //\n                // FIXME: avoid iterating over change trees twice.\n                //\n                this.onEndEncode(changeTrees);\n            }\n\n            return buffer.subarray(0, it.offset);\n        }\n    }\n\n    encodeAll(it: Iterator = { offset: 0 }, buffer: Buffer = this.sharedBuffer) {\n        // console.log(`encodeAll(), this.root.allChanges (${this.root.allChanges.size})`);\n\n        // Array.from(this.root.allChanges.entries()).map((item) => {\n        //     console.log(\"->\", { ref: item[0].ref.constructor.name, refId: item[0].refId, changes: item[1].size });\n        // });\n\n        return this.encode(it, undefined, buffer, this.root.allChanges, true);\n    }\n\n    encodeAllView(view: StateView, sharedOffset: number, it: Iterator, bytes = this.sharedBuffer) {\n        const viewOffset = it.offset;\n\n        // console.log(`encodeAllView(), this.root.allFilteredChanges (${this.root.allFilteredChanges.size})`);\n        // this.debugAllFilteredChanges();\n\n        // try to encode \"filtered\" changes\n        this.encode(it, view, bytes, this.root.allFilteredChanges, true);\n\n        return Buffer.concat([\n            bytes.subarray(0, sharedOffset),\n            bytes.subarray(viewOffset, it.offset)\n        ]);\n    }\n\n\n    debugAllFilteredChanges() {\n        Array.from(this.root.allFilteredChanges.entries()).map((item) => {\n            console.log(\"->\", { refId: item[0].refId, changes: item[1].size }, item[0].ref.toJSON());\n            if (Array.isArray(item[0].ref.toJSON())) {\n                item[1].forEach((op, key) => {\n                    console.log(\"  ->\", { key, op: OPERATION[op] });\n                })\n            }\n        });\n    }\n\n    encodeView(view: StateView, sharedOffset: number, it: Iterator, bytes = this.sharedBuffer) {\n        const viewOffset = it.offset;\n\n        // try to encode \"filtered\" changes\n        this.encode(it, view, bytes, this.root.filteredChanges);\n\n        // encode visibility changes (add/remove for this view)\n        const viewChangesIterator = view.changes.entries();\n        for (const [changeTree, changes] of viewChangesIterator) {\n            if (changes.size === 0) {\n                // FIXME: avoid having empty changes if no changes were made\n                // console.log(\"changes.size === 0\", changeTree.ref.constructor.name);\n                continue;\n            }\n\n            const ref = changeTree.ref;\n\n            const ctor = ref['constructor'];\n            const encoder = ctor[$encoder];\n\n            bytes[it.offset++] = SWITCH_TO_STRUCTURE & 255;\n            encode.number(bytes, changeTree.refId, it);\n\n            const changesIterator = changes.entries();\n\n            for (const [fieldIndex, operation] of changesIterator) {\n                // isEncodeAll = false\n                // hasView = true\n                encoder(this, bytes, changeTree, fieldIndex, operation, it, false, true);\n            }\n        }\n\n        //\n        // TODO: only clear view changes after all views are encoded\n        // (to allow re-using StateView's for multiple clients)\n        //\n        // clear \"view\" changes after encoding\n        view.changes.clear();\n\n        return Buffer.concat([\n            bytes.subarray(0, sharedOffset),\n            bytes.subarray(viewOffset, it.offset)\n        ]);\n    }\n\n    onEndEncode(changeTrees = this.root.changes) {\n        const changeTreesIterator = changeTrees.entries();\n        for (const [changeTree, _] of changeTreesIterator) {\n            changeTree.endEncode();\n        }\n    }\n\n    discardChanges() {\n        // discard shared changes\n        if (this.root.changes.size > 0) {\n            this.onEndEncode(this.root.changes);\n            this.root.changes.clear();\n        }\n        // discard filtered changes\n        if (this.root.filteredChanges.size > 0) {\n            this.onEndEncode(this.root.filteredChanges);\n            this.root.filteredChanges.clear();\n        }\n    }\n\n    tryEncodeTypeId (bytes: Buffer, baseType: typeof Schema, targetType: typeof Schema, it: Iterator) {\n        const baseTypeId = this.context.getTypeId(baseType);\n        const targetTypeId = this.context.getTypeId(targetType);\n\n        if (baseTypeId !== targetTypeId) {\n            bytes[it.offset++] = TYPE_ID & 255;\n            encode.number(bytes, targetTypeId, it);\n        }\n    }\n}\n","export function spliceOne(arr: any[], index: number): boolean {\n    // manually splice an array\n    if (index === -1 || index >= arr.length) {\n        return false;\n    }\n\n    const len = arr.length - 1;\n\n    for (let i = index; i < len; i++) {\n        arr[i] = arr[i + 1];\n    }\n\n    arr.length = len;\n\n    return true;\n}","import { Metadata } from \"../Metadata\";\nimport { $childType } from \"../types/symbols\";\nimport { Ref } from \"../encoder/ChangeTree\";\nimport { spliceOne } from \"../types/utils\";\nimport type { MapSchema } from \"../types/custom/MapSchema\";\nimport { OPERATION } from \"../encoding/spec\";\n\nclass DecodingWarning extends Error {\n    constructor(message: string) {\n        super(message);\n        this.name = \"DecodingWarning\";\n    }\n}\n\n/**\n * Used for decoding only.\n */\n\nexport type SchemaCallbacks = { [field: string | number]: Function[] };\n\nexport class ReferenceTracker {\n    //\n    // Relation of refId => Schema structure\n    // For direct access of structures during decoding time.\n    //\n    public refs = new Map<number, Ref>();\n    public refIds = new WeakMap<Ref, number>();\n\n    public refCounts: { [refId: number]: number; } = {};\n    public deletedRefs = new Set<number>();\n\n    public callbacks: { [refId: number]: SchemaCallbacks } = {};\n    protected nextUniqueId: number = 0;\n\n    getNextUniqueId() {\n        return this.nextUniqueId++;\n    }\n\n    // for decoding\n    addRef(refId: number, ref: Ref, incrementCount: boolean = true) {\n        this.refs.set(refId, ref);\n        this.refIds.set(ref, refId);\n\n        if (incrementCount) {\n            this.refCounts[refId] = (this.refCounts[refId] || 0) + 1;\n        }\n\n        if (this.deletedRefs.has(refId)) {\n            this.deletedRefs.delete(refId);\n        }\n    }\n\n    // for decoding\n    removeRef(refId: number) {\n        const refCount = this.refCounts[refId];\n\n        if (refCount === undefined) {\n            try {\n                throw new DecodingWarning(\"trying to remove refId that doesn't exist\");\n            } catch (e) {\n                console.warn(e);\n            }\n            return;\n        }\n\n        if (refCount === 0) {\n            try {\n                const ref = this.refs.get(refId);\n                throw new DecodingWarning(`trying to remove refId '${refId}' with 0 refCount (${ref.constructor.name}: ${JSON.stringify(ref)})`);\n            } catch (e) {\n                console.warn(e);\n            }\n            return;\n        }\n\n        if ((this.refCounts[refId] = refCount - 1) <= 0) {\n            this.deletedRefs.add(refId);\n        }\n    }\n\n    clearRefs() {\n        this.refs.clear();\n        this.deletedRefs.clear();\n        this.refCounts = {};\n    }\n\n    // for decoding\n    garbageCollectDeletedRefs() {\n        this.deletedRefs.forEach((refId) => {\n            //\n            // Skip active references.\n            //\n            if (this.refCounts[refId] > 0) { return; }\n\n            const ref = this.refs.get(refId);\n\n            //\n            // Ensure child schema instances have their references removed as well.\n            //\n            if (Metadata.isValidInstance(ref)) {\n                const metadata: Metadata = ref['constructor'][Symbol.metadata];\n                for (const field in metadata) {\n                    const childRefId = typeof(ref[field]) === \"object\" && this.refIds.get(ref[field]);\n                    if (childRefId) {\n                        this.removeRef(childRefId);\n                    }\n                }\n\n            } else {\n                if (typeof (Object.values(ref[$childType])[0]) === \"function\") {\n                    Array.from((ref as MapSchema).values())\n                        .forEach((child) => this.removeRef(this.refIds.get(child)));\n                }\n            }\n\n            this.refs.delete(refId); // remove ref\n            delete this.refCounts[refId]; // remove ref count\n            delete this.callbacks[refId]; // remove callbacks\n        });\n\n        // clear deleted refs.\n        this.deletedRefs.clear();\n    }\n\n    addCallback(refId: number, fieldOrOperation: string | number, callback: Function) {\n        if (refId === undefined) {\n            const name = (typeof(fieldOrOperation) === \"number\")\n                    ? OPERATION[fieldOrOperation]\n                    : fieldOrOperation\n            throw new Error(\n                `Can't addCallback on '${name}' (refId is undefined)`\n            );\n        }\n        if (!this.callbacks[refId]) {\n            this.callbacks[refId] = {};\n        }\n        if (!this.callbacks[refId][fieldOrOperation]) {\n            this.callbacks[refId][fieldOrOperation] = [];\n        }\n        this.callbacks[refId][fieldOrOperation].push(callback);\n        return () => this.removeCallback(refId, fieldOrOperation, callback);\n    }\n\n    removeCallback(refId: number, field: string | number, callback: Function) {\n        const index = this.callbacks?.[refId]?.[field]?.indexOf(callback);\n        if (index !== -1) {\n            spliceOne(this.callbacks[refId][field], index);\n        }\n    }\n\n}","import { TypeContext } from \"../annotations\";\nimport { $changes, $childType, $decoder, $onDecodeEnd } from \"../types/symbols\";\nimport { Schema } from \"../Schema\";\n\nimport * as decode from \"../encoding/decode\";\nimport { OPERATION, SWITCH_TO_STRUCTURE, TYPE_ID } from '../encoding/spec';\nimport type { Ref } from \"../encoder/ChangeTree\";\nimport type { Iterator } from \"../encoding/decode\";\nimport { ReferenceTracker } from \"./ReferenceTracker\";\nimport { DEFINITION_MISMATCH, type DataChange, type DecodeOperation } from \"./DecodeOperation\";\nimport { Collection } from \"../types/HelperTypes\";\n\nexport class Decoder<T extends Schema = any> {\n    context: TypeContext;\n\n    state: T;\n    root: ReferenceTracker;\n\n    currentRefId: number = 0;\n\n    triggerChanges?: (allChanges: DataChange[]) => void;\n\n    constructor(root: T, context?: TypeContext) {\n        this.setRoot(root);\n        this.context = context || new TypeContext(root.constructor as typeof Schema);\n\n        // console.log(\">>>>>>>>>>>>>>>> Decoder types\");\n        // this.context.schemas.forEach((id, schema) => {\n        //     console.log(\"type:\", id, schema.name, Object.keys(schema[Symbol.metadata]));\n        // });\n    }\n\n    protected setRoot(root: T) {\n        this.state = root;\n        this.root = new ReferenceTracker();\n        this.root.addRef(0, root);\n    }\n\n    decode(\n        bytes: Buffer,\n        it: Iterator = { offset: 0 },\n        ref: Ref = this.state,\n    ) {\n        const allChanges: DataChange[] = [];\n\n        const $root = this.root;\n        const totalBytes = bytes.byteLength;\n\n        let decoder: DecodeOperation = ref['constructor'][$decoder];\n\n        this.currentRefId = 0;\n\n        while (it.offset < totalBytes) {\n            //\n            // Peek ahead, check if it's a switch to a different structure\n            //\n            if (bytes[it.offset] == SWITCH_TO_STRUCTURE) {\n                it.offset++;\n\n                this.currentRefId = decode.number(bytes, it);\n                const nextRef = $root.refs.get(this.currentRefId) as Schema;\n\n                //\n                // Trying to access a reference that haven't been decoded yet.\n                //\n                if (!nextRef) { throw new Error(`\"refId\" not found: ${this.currentRefId}`); }\n                ref[$onDecodeEnd]?.()\n                ref = nextRef;\n                decoder = ref['constructor'][$decoder];\n\n                continue;\n            }\n\n            const result = decoder(this, bytes, it, ref, allChanges);\n\n            if (result === DEFINITION_MISMATCH) {\n                console.warn(\"@colyseus/schema: definition mismatch\");\n\n                //\n                // keep skipping next bytes until reaches a known structure\n                // by local decoder.\n                //\n                const nextIterator: decode.Iterator = { offset: it.offset };\n                while (it.offset < totalBytes) {\n                    if (decode.switchStructureCheck(bytes, it)) {\n                        nextIterator.offset = it.offset + 1;\n                        if ($root.refs.has(decode.number(bytes, nextIterator))) {\n                            break;\n                        }\n                    }\n\n                    it.offset++;\n                }\n                continue;\n            }\n        }\n\n        // FIXME: DRY with SWITCH_TO_STRUCTURE block.\n        ref[$onDecodeEnd]?.()\n\n        // trigger changes\n        this.triggerChanges?.(allChanges);\n\n        // drop references of unused schemas\n        $root.garbageCollectDeletedRefs();\n\n        return allChanges;\n    }\n\n    getInstanceType(bytes: Buffer, it: Iterator, defaultType: typeof Schema): typeof Schema {\n        let type: typeof Schema;\n\n        if (bytes[it.offset] === TYPE_ID) {\n            it.offset++;\n            const type_id = decode.number(bytes, it);\n            type = this.context.get(type_id);\n        }\n\n        return type || defaultType;\n    }\n\n    createInstanceOfType (type: typeof Schema): Schema {\n        // let instance: Schema = new (type as any)();\n\n        // // assign root on $changes\n        // instance[$changes].root = this.root[$changes].root;\n\n        // return instance;\n        return new (type as any)();\n    }\n\n    removeChildRefs(ref: Collection, allChanges: DataChange[]) {\n        const changeTree = ref[$changes];\n\n        const needRemoveRef = typeof (ref[$childType]) !== \"string\";\n        const refId = changeTree.refId;\n\n        ref.forEach((value: any, key: any) => {\n            allChanges.push({\n                ref: value,\n                refId,\n                op: OPERATION.DELETE,\n                field: key,\n                value: undefined,\n                previousValue: value\n            });\n\n            if (needRemoveRef) {\n                this.root.removeRef(this.root.refIds.get(value));\n            }\n        });\n    }\n\n}\n\n","import { type, PrimitiveType, DefinitionType, TypeContext } from \"./annotations\";\nimport { Metadata } from \"./Metadata\";\nimport { ArraySchema } from \"./types/custom/ArraySchema\";\nimport { Iterator } from \"./encoding/decode\";\nimport { Encoder } from \"./encoder/Encoder\";\nimport { Decoder } from \"./decoder/Decoder\";\nimport { Schema } from \"./Schema\";\n\n/**\n * Reflection\n */\nexport class ReflectionField extends Schema {\n    @type(\"string\") name: string;\n    @type(\"string\") type: string;\n    @type(\"number\") referencedType: number;\n}\n\nexport class ReflectionType extends Schema {\n    @type(\"number\") id: number;\n    @type(\"number\") extendsId: number;\n    @type([ ReflectionField ]) fields = new ArraySchema<ReflectionField>();\n}\n\nexport class Reflection extends Schema {\n    @type([ ReflectionType ]) types: ArraySchema<ReflectionType> = new ArraySchema<ReflectionType>();\n\n    static encode(instance: Schema, context?: TypeContext, it: Iterator = { offset: 0 }) {\n        if (!context) {\n            context = new TypeContext(instance.constructor as typeof Schema);\n        }\n\n        const reflection = new Reflection();\n        const encoder = new Encoder(reflection);\n\n        const buildType = (currentType: ReflectionType, metadata: Metadata) => {\n            for (const fieldName in metadata) {\n                // skip fields from parent classes\n                if (!Object.prototype.hasOwnProperty.call(metadata, fieldName)) {\n                    continue;\n                }\n\n                const field = new ReflectionField();\n                field.name = fieldName;\n\n                let fieldType: string;\n\n                const type = metadata[fieldName].type;\n\n                if (typeof (type) === \"string\") {\n                    fieldType = type;\n\n                } else {\n                    let childTypeSchema: typeof Schema;\n\n                    //\n                    // TODO: refactor below.\n                    //\n                    if (Schema.is(type)) {\n                        fieldType = \"ref\";\n                        childTypeSchema = type as typeof Schema;\n\n                    } else {\n                        fieldType = Object.keys(type)[0];\n\n                        if (typeof(type[fieldType]) === \"string\") {\n                            fieldType += \":\" + type[fieldType]; // array:string\n\n                        } else {\n                            childTypeSchema = type[fieldType];\n                        }\n                    }\n\n                    field.referencedType = (childTypeSchema)\n                        ? context.getTypeId(childTypeSchema)\n                        : -1;\n                }\n\n                field.type = fieldType;\n                currentType.fields.push(field);\n            }\n\n            reflection.types.push(currentType);\n        }\n\n        for (let typeid in context.types) {\n            const klass = context.types[typeid];\n            const type = new ReflectionType();\n            type.id = Number(typeid);\n\n            // support inheritance\n            const inheritFrom = Object.getPrototypeOf(klass);\n            if (inheritFrom !== Schema) {\n                type.extendsId = context.schemas.get(inheritFrom);\n            }\n\n            buildType(type, klass[Symbol.metadata]);\n        }\n\n        const buf = encoder.encodeAll(it);\n        return Buffer.from(buf, 0, it.offset);\n    }\n\n    static decode<T extends Schema = Schema>(bytes: Buffer, it?: Iterator): T {\n        const reflection = new Reflection();\n\n        const reflectionDecoder = new Decoder(reflection);\n        reflectionDecoder.decode(bytes, it);\n\n        const typeContext = new TypeContext();\n\n        // 1st pass, initialize metadata + inheritance\n        reflection.types.forEach((reflectionType) => {\n            const parentClass: typeof Schema = typeContext.get(reflectionType.extendsId) ?? Schema;\n            const schema: typeof Schema = class _ extends parentClass {};\n\n            const parentMetadata = parentClass[Symbol.metadata];\n\n            // register for inheritance support\n            TypeContext.register(schema);\n\n            // for inheritance support\n            Metadata.initialize(schema, parentMetadata);\n\n            typeContext.add(schema, reflectionType.id);\n        }, {});\n\n        // 2nd pass, set fields\n        reflection.types.forEach((reflectionType) => {\n            const schemaType = typeContext.get(reflectionType.id);\n            const metadata = schemaType[Symbol.metadata];\n\n            // FIXME: use metadata[-1] to get field count\n            const parentFieldIndex = 0;\n\n            // console.log(\"--------------------\");\n            // // console.log(\"reflectionType\", reflectionType.toJSON());\n            // console.log(\"reflectionType.fields\", reflectionType.fields.toJSON());\n            // console.log(\"parentFieldIndex\", parentFieldIndex);\n\n            //\n            // FIXME: set fields using parentKlass as well\n            // currently the fields are duplicated on inherited classes\n            //\n            // // const parentKlass = reflection.types[reflectionType.extendsId];\n            // // parentKlass.fields\n\n            reflectionType.fields.forEach((field, i) => {\n                const fieldIndex = parentFieldIndex + i;\n\n                if (field.referencedType !== undefined) {\n                    let fieldType = field.type;\n                    let refType: PrimitiveType = typeContext.get(field.referencedType);\n\n                    // map or array of primitive type (-1)\n                    if (!refType) {\n                        const typeInfo = field.type.split(\":\");\n                        fieldType = typeInfo[0];\n                        refType = typeInfo[1] as PrimitiveType; // string\n                    }\n\n                    if (fieldType === \"ref\") {\n                        Metadata.addField(metadata, fieldIndex, field.name, refType);\n\n                    } else {\n                        Metadata.addField(metadata, fieldIndex, field.name, { [fieldType]: refType } as DefinitionType);\n                    }\n\n                } else {\n                    Metadata.addField(metadata, fieldIndex, field.name, field.type as PrimitiveType);\n                }\n            });\n        });\n\n        // @ts-ignore\n        return new (typeContext.get(0))();\n    }\n}\n","import { Metadata } from \"../../Metadata\";\nimport { Collection, NonFunctionNonPrimitivePropNames, NonFunctionPropNames } from \"../../types/HelperTypes\";\nimport { Ref } from \"../../encoder/ChangeTree\";\nimport { Decoder } from \"../Decoder\";\nimport { DataChange } from \"../DecodeOperation\";\nimport { OPERATION } from \"../../encoding/spec\";\nimport { DefinitionType } from \"../../annotations\";\nimport { Schema } from \"../../Schema\";\nimport type { ArraySchema } from \"../../types/custom/ArraySchema\";\n\n//\n// Discussion: https://github.com/colyseus/schema/issues/155\n//\n// Main points:\n// - Decouple structures from their callbacks.\n// - Registering deep callbacks can be confusing.\n// - Avoid closures by allowing to pass a context. (https://github.com/colyseus/schema/issues/155#issuecomment-1804694081)\n//\n\nexport type GetCallbackProxy = (<T extends Schema>(instance: T) => CallbackProxy<T>);\n\nexport type CallbackProxy<T> = unknown extends T // is \"any\"?\n    ? InstanceCallback<T> & CollectionCallback<any, any>\n    : T extends Collection<infer K, infer V, infer _>\n        ? CollectionCallback<K, V>\n        : InstanceCallback<T>;\n\ntype InstanceCallback<T> = {\n    /**\n     * Trigger callback when value of a property changes.\n     *\n     * @param prop name of the property\n     * @param callback callback to be triggered on property change\n     * @param immediate trigger immediatelly if property has been already set.\n     */\n    listen<K extends NonFunctionPropNames<T>>(\n        prop: K,\n        callback: (value: T[K], previousValue: T[K]) => void,\n        immediate?: boolean,\n    )\n    /**\n     * Trigger callback whenever any property changed within this instance.\n     *\n     * @param prop name of the property\n     * @param callback callback to be triggered on property change\n     * @param immediate trigger immediatelly if property has been already set.\n     */\n    onChange(callback: () => void): void;\n\n    /**\n     * Bind properties to another object. Changes on the properties will be reflected on the target object.\n     *\n     * @param targetObject object to bind properties to\n     * @param properties list of properties to bind. If not provided, all properties will be bound.\n     */\n    bindTo(targetObject: any, properties?: Array<NonFunctionPropNames<T>>): void;\n} & {\n    [K in NonFunctionNonPrimitivePropNames<T>]: CallbackProxy<T[K]>;\n}\n\ntype CollectionCallback<K, V> = {\n    /**\n     * Trigger callback when an item has been added to the collection.\n     *\n     * @param callback\n     * @param immediate\n     */\n    onAdd(callback: (item: V, index: K) => void, immediate?: boolean): void;\n\n    /**\n     * Trigger callback when an item has been removed to the collection.\n     *\n     * @param callback\n     */\n    onRemove(callback: (item: V, index: K) => void): void;\n\n    // /**\n    //  * Trigger callback when an item has been removed to the collection.\n    //  *\n    //  * @param callback\n    //  */\n    // onChange(callback: (item: V, index: K) => void): void;\n};\n\ntype OnInstanceAvailableCallback = (callback: (ref: Ref, existing: boolean) => void) => void;\n\ntype CallContext = {\n    instance?: any,\n    parentInstance?: any,\n    onInstanceAvailable?: OnInstanceAvailableCallback,\n}\n\n\nexport function getDecoderStateCallbacks<T extends Schema>(decoder: Decoder<T>): GetCallbackProxy {\n    const $root = decoder.root;\n    const callbacks = $root.callbacks;\n\n    let isTriggeringOnAdd = false;\n\n    decoder.triggerChanges = function (allChanges: DataChange[]) {\n        const uniqueRefIds = new Set<number>();\n\n        for (let i = 0, l = allChanges.length; i < l; i++) {\n            const change = allChanges[i];\n            const refId = change.refId;\n            const ref = change.ref;\n            const $callbacks = callbacks[refId];\n\n            if (!$callbacks) { continue; }\n\n            //\n            // trigger onRemove on child structure.\n            //\n            if (\n                (change.op & OPERATION.DELETE) === OPERATION.DELETE &&\n                change.previousValue instanceof Schema\n            ) {\n                const deleteCallbacks = callbacks[$root.refIds.get(change.previousValue)]?.[OPERATION.DELETE];\n                for (let i = deleteCallbacks?.length - 1; i >= 0; i--) {\n                    deleteCallbacks[i]();\n                }\n            }\n\n            if (ref instanceof Schema) {\n                //\n                // Handle schema instance\n                //\n\n                if (!uniqueRefIds.has(refId)) {\n                    // trigger onChange\n                    const replaceCallbacks = $callbacks?.[OPERATION.REPLACE];\n                    for (let i = replaceCallbacks?.length - 1; i >= 0; i--) {\n                        replaceCallbacks[i]();\n                        // try {\n                        // } catch (e) {\n                        //     console.error(e);\n                        // }\n                    }\n                }\n\n                if ($callbacks.hasOwnProperty(change.field)) {\n                    const fieldCallbacks = $callbacks[change.field];\n                    for (let i = fieldCallbacks?.length - 1; i >= 0; i--) {\n                        fieldCallbacks[i](change.value, change.previousValue);\n                        // try {\n                        // } catch (e) {\n                        //     console.error(e);\n                        // }\n                    }\n                }\n\n\n            } else {\n                //\n                // Handle collection of items\n                //\n\n                if ((change.op & OPERATION.DELETE) === OPERATION.DELETE) {\n                    //\n                    // FIXME: `previousValue` should always be available.\n                    //\n                    if (change.previousValue !== undefined) {\n                        // triger onRemove\n                        const deleteCallbacks = $callbacks[OPERATION.DELETE];\n                        for (let i = deleteCallbacks?.length - 1; i >= 0; i--) {\n                            deleteCallbacks[i](change.previousValue, change.dynamicIndex ?? change.field);\n                        }\n                    }\n\n                    // Handle DELETE_AND_ADD operations\n                    // FIXME: should we set \"isTriggeringOnAdd\" here?\n                    if ((change.op & OPERATION.ADD) === OPERATION.ADD) {\n                        const addCallbacks = $callbacks[OPERATION.ADD];\n                        for (let i = addCallbacks?.length - 1; i >= 0; i--) {\n                            addCallbacks[i](change.value, change.dynamicIndex ?? change.field);\n                        }\n                    }\n\n                } else if ((change.op & OPERATION.ADD) === OPERATION.ADD && change.previousValue === undefined) {\n                    // triger onAdd\n\n                    isTriggeringOnAdd = true;\n                    const addCallbacks = $callbacks[OPERATION.ADD];\n                    for (let i = addCallbacks?.length - 1; i >= 0; i--) {\n                        addCallbacks[i](change.value, change.dynamicIndex ?? change.field);\n                    }\n                    isTriggeringOnAdd = false;\n                }\n\n                // trigger onChange\n                if (change.value !== change.previousValue) {\n                    const replaceCallbacks = $callbacks[OPERATION.REPLACE];\n                    for (let i = replaceCallbacks?.length - 1; i >= 0; i--) {\n                        replaceCallbacks[i](change.value, change.dynamicIndex ?? change.field);\n                    }\n                }\n            }\n\n            uniqueRefIds.add(refId);\n        }\n    };\n\n    function getProxy(metadataOrType: Metadata | DefinitionType, context: CallContext) {\n        let metadata: Metadata = context.instance?.constructor[Symbol.metadata] || metadataOrType;\n        let isCollection = (\n            (context.instance && typeof (context.instance['forEach']) === \"function\") ||\n            (metadataOrType && typeof (metadataOrType[Symbol.metadata]) === \"undefined\")\n        );\n\n        if (metadata && !isCollection) {\n\n            const onAdd = function (\n                ref: Ref,\n                prop: string,\n                callback: (value: any, previousValue: any) => void, immediate: boolean\n            ) {\n                // immediate trigger\n                if (\n                    immediate &&\n                    context.instance[prop] !== undefined &&\n                    !isTriggeringOnAdd // FIXME: This is a workaround (https://github.com/colyseus/schema/issues/147)\n                ) {\n                    callback(context.instance[prop], undefined);\n                }\n                return $root.addCallback($root.refIds.get(ref), prop, callback);\n            }\n\n            /**\n             * Schema instances\n             */\n            return new Proxy({\n                listen: function listen(prop: string, callback: (value: any, previousValue: any) => void, immediate: boolean = true) {\n                    if (context.instance) {\n                        return onAdd(context.instance, prop, callback, immediate);\n\n                    } else {\n                        // collection instance not received yet\n                        context.onInstanceAvailable((ref: Ref, existing: boolean) =>\n                            onAdd(ref, prop, callback, immediate && existing));\n                    }\n                },\n                onChange: function onChange(callback: () => void) {\n                    return $root.addCallback(\n                        $root.refIds.get(context.instance),\n                        OPERATION.REPLACE,\n                        callback\n                    );\n                },\n                bindTo: function bindTo(targetObject: any, properties?: string[]) {\n                    //\n                    // TODO: refactor this implementation. There is room for improvement here.\n                    //\n                    if (!properties) {\n                        properties = Object.keys(metadata);\n                    }\n                    return $root.addCallback(\n                        $root.refIds.get(context.instance),\n                        OPERATION.REPLACE,\n                        () => {\n                            properties.forEach((prop) =>\n                                targetObject[prop] = context.instance[prop])\n                        }\n                    );\n                }\n            }, {\n                get(target, prop: string) {\n                    if (metadata[prop]) {\n                        const instance = context.instance?.[prop];\n                        const onInstanceAvailable: OnInstanceAvailableCallback = (\n                            (callback: (ref: Ref, existing: boolean) => void) => {\n                                const unbind = $(context.instance).listen(prop, (value, _) => {\n                                    callback(value, false);\n\n                                    // FIXME: by \"unbinding\" the callback here,\n                                    // it will not support when the server\n                                    // re-instantiates the instance.\n                                    //\n                                    unbind?.();\n                                }, false);\n\n                                // has existing value\n                                if ($root.refIds.get(instance) !== undefined) {\n                                    callback(instance, true);\n                                }\n                            }\n                        );\n                        return getProxy(metadata[prop].type, {\n                            instance,\n                            parentInstance: context.instance,\n                            onInstanceAvailable,\n                        });\n\n                    } else {\n                        // accessing the function\n                        return target[prop];\n                    }\n                },\n                has(target, prop: string) { return metadata[prop] !== undefined; },\n                set(_, _1, _2) { throw new Error(\"not allowed\"); },\n                deleteProperty(_, _1) { throw new Error(\"not allowed\"); },\n            });\n\n        } else {\n            /**\n             * Collection instances\n             */\n\n            const onAdd = function (ref: Ref, callback: (value: any, key: any) => void, immediate: boolean) {\n                // Trigger callback on existing items\n                if (immediate) {\n                    (ref as ArraySchema).forEach((v, k) => callback(v, k));\n                }\n                return $root.addCallback($root.refIds.get(ref), OPERATION.ADD, callback);\n            };\n\n            const onRemove = function (ref: Ref, callback: (value: any, key: any) => void) {\n                return $root.addCallback($root.refIds.get(ref), OPERATION.DELETE, callback);\n            };\n\n            return new Proxy({\n                onAdd: function(callback: (value, key) => void, immediate: boolean = true) {\n                    //\n                    // https://github.com/colyseus/schema/issues/147\n                    // If parent instance has \"onAdd\" registered, avoid triggering immediate callback.\n                    //\n                    // FIXME: \"isTriggeringOnAdd\" is a workaround. We should find a better way to handle this.\n                    //\n                    if (context.onInstanceAvailable) {\n                        // collection instance not received yet\n                        context.onInstanceAvailable((ref: Ref, existing: boolean) =>\n                            onAdd(ref, callback, immediate && existing && !isTriggeringOnAdd));\n\n                    } else if (context.instance) {\n                        onAdd(context.instance, callback, immediate && !isTriggeringOnAdd);\n                    }\n                },\n                onRemove: function(callback: (value, key) => void) {\n                    if (context.onInstanceAvailable) {\n                        // collection instance not received yet\n                        context.onInstanceAvailable((ref: Ref) =>\n                            onRemove(ref, callback));\n\n                    } else if (context.instance) {\n                        onRemove(context.instance, callback);\n                    }\n                },\n            }, {\n                get(target, prop: string) {\n                    if (!target[prop]) {\n                        throw new Error(`Can't access '${prop}' through callback proxy. access the instance directly.`);\n                    }\n                    return target[prop];\n                },\n                has(target, prop) { return target[prop] !== undefined; },\n                set(_, _1, _2) { throw new Error(\"not allowed\"); },\n                deleteProperty(_, _1) { throw new Error(\"not allowed\"); },\n            });\n        }\n    }\n\n    function $<T>(instance: T): CallbackProxy<T> {\n        return getProxy(undefined, { instance }) as CallbackProxy<T>;\n    }\n\n    return $;\n}","import { DataChange } from \"../DecodeOperation\";\nimport { Decoder } from \"../Decoder\";\n\nexport function getRawChangesCallback(\n    decoder: Decoder,\n    callback: (changes: DataChange[]) => void\n) {\n    decoder.triggerChanges = callback;\n}","import { ChangeTree, Ref } from \"./ChangeTree\";\nimport { $changes } from \"../types/symbols\";\nimport { DEFAULT_VIEW_TAG } from \"../annotations\";\nimport { OPERATION } from \"../encoding/spec\";\nimport { Metadata } from \"../Metadata\";\nimport type { Schema } from \"../Schema\";\n\nexport function createView(root: Schema) {\n}\n\nexport class StateView {\n    /**\n     * List of ChangeTree's that are visible to this view\n     */\n    items: WeakSet<ChangeTree> = new WeakSet<ChangeTree>();\n\n    /**\n     * List of ChangeTree's that are invisible to this view\n     */\n    invisible: WeakSet<ChangeTree> = new WeakSet<ChangeTree>();\n\n    tags?: WeakMap<ChangeTree, Set<number>>; // TODO: use bit manipulation instead of Set<number> ()\n\n    /**\n     * Manual \"ADD\" operations for changes per ChangeTree, specific to this view.\n     * (This is used to force encoding a property, even if it was not changed)\n     */\n    changes = new Map<ChangeTree, Map<number, OPERATION>>();\n\n    // TODO: allow to set multiple tags at once\n    add(obj: Ref, tag: number = DEFAULT_VIEW_TAG) {\n        if (!obj[$changes]) {\n            console.warn(\"StateView#add(), invalid object:\", obj);\n            return this;\n        }\n\n        // FIXME: ArraySchema/MapSchema does not have metadata\n        const metadata: Metadata = obj.constructor[Symbol.metadata];\n\n        let changeTree: ChangeTree = obj[$changes];\n        this.items.add(changeTree);\n\n        // Add children of this ChangeTree to this view\n        changeTree.forEachChild((change, index) => {\n            // Do not ADD children that don't have the same tag\n            if (metadata && metadata[metadata[index]].tag !== tag) {\n                return;\n            }\n            this.add(change.ref, tag);\n        });\n\n        // add parent ChangeTree's, if they are invisible to this view\n        // TODO: REFACTOR addParent()\n        this.addParent(changeTree, tag);\n\n        //\n        // TODO: when adding an item of a MapSchema, the changes may not\n        // be set (only the parent's changes are set)\n        //\n        let changes = this.changes.get(changeTree);\n        if (changes === undefined) {\n            changes = new Map<number, OPERATION>();\n            this.changes.set(changeTree, changes)\n        }\n\n        // set tag\n        if (tag !== DEFAULT_VIEW_TAG) {\n            if (!this.tags) {\n                this.tags = new WeakMap<ChangeTree, Set<number>>();\n            }\n            let tags: Set<number>;\n            if (!this.tags.has(changeTree)) {\n                tags = new Set<number>();\n                this.tags.set(changeTree, tags);\n            } else {\n                tags = this.tags.get(changeTree);\n            }\n            tags.add(tag);\n\n            // Ref: add tagged properties\n            metadata?.[-3]?.[tag]?.forEach((index) => {\n                if (changeTree.getChange(index) !== OPERATION.DELETE) {\n                    changes.set(index, OPERATION.ADD)\n                }\n            });\n\n        } else {\n\n            // console.log(\"DEFAULT TAG\", changeTree.allChanges);\n\n            // // add default tag properties\n            // metadata?.[-3]?.[DEFAULT_VIEW_TAG]?.forEach((index) => {\n            //     if (changeTree.getChange(index) !== OPERATION.DELETE) {\n            //         changes.set(index, OPERATION.ADD);\n            //     }\n            // });\n\n            const allChangesSet = (changeTree.isFiltered || changeTree.isPartiallyFiltered)\n                ? changeTree.allFilteredChanges\n                : changeTree.allChanges;\n            const it = allChangesSet.keys();\n            const isInvisible = this.invisible.has(changeTree);\n\n            for (const index of it) {\n                if (\n                    (isInvisible || metadata?.[metadata?.[index]].tag === tag) &&\n                    changeTree.getChange(index) !== OPERATION.DELETE\n                ) {\n                    changes.set(index, OPERATION.ADD);\n                }\n            }\n        }\n\n        // TODO: avoid unnecessary iteration here\n        while (\n            changeTree.parent &&\n            (changeTree = changeTree.parent[$changes]) &&\n            (changeTree.isFiltered || changeTree.isPartiallyFiltered)\n        ) {\n            this.items.add(changeTree);\n        }\n\n        return this;\n    }\n\n    protected addParent(changeTree: ChangeTree, tag: number) {\n        const parentRef = changeTree.parent;\n        if (!parentRef) { return; }\n\n        const parentChangeTree = parentRef[$changes];\n        const parentIndex = changeTree.parentIndex;\n\n        if (!this.invisible.has(parentChangeTree)) {\n            // parent is already available, no need to add it!\n            return;\n        }\n\n        this.addParent(parentChangeTree, tag);\n\n        // add parent's tag properties\n        if (parentChangeTree.getChange(parentIndex) !== OPERATION.DELETE) {\n\n            let parentChanges = this.changes.get(parentChangeTree);\n            if (parentChanges === undefined) {\n                parentChanges = new Map<number, OPERATION>();\n                this.changes.set(parentChangeTree, parentChanges);\n            }\n\n            // console.log(\"add parent change\", {\n            //     parentIndex,\n            //     parentChanges,\n            //     parentChange: (\n            //         parentChangeTree.getChange(parentIndex) &&\n            //         OPERATION[parentChangeTree.getChange(parentIndex)]\n            //     ),\n            // })\n\n            if (!this.tags) { this.tags = new WeakMap<ChangeTree, Set<number>>(); }\n            let tags: Set<number>;\n            if (!this.tags.has(parentChangeTree)) {\n                tags = new Set<number>();\n                this.tags.set(parentChangeTree, tags);\n            } else {\n                tags = this.tags.get(parentChangeTree);\n            }\n            tags.add(tag);\n\n            parentChanges.set(parentIndex, OPERATION.ADD);\n        }\n\n    }\n\n    remove(obj: Ref, tag: number = DEFAULT_VIEW_TAG) {\n        const changeTree = obj[$changes];\n        if (!changeTree) {\n            console.warn(\"StateView#remove(), invalid object:\", obj);\n            return this;\n        }\n\n        this.items.delete(changeTree);\n\n        const ref = changeTree.ref;\n        const metadata: Metadata = ref.constructor[Symbol.metadata];\n\n        let changes = this.changes.get(changeTree);\n        if (changes === undefined) {\n            changes = new Map<number, OPERATION>();\n            this.changes.set(changeTree, changes)\n        }\n\n        if (tag === DEFAULT_VIEW_TAG) {\n            // parent is collection (Map/Array)\n            const parent = changeTree.parent;\n            if (!Metadata.isValidInstance(parent)) {\n                const parentChangeTree = parent[$changes];\n                let changes = this.changes.get(parentChangeTree);\n                if (changes === undefined) {\n                    changes = new Map<number, OPERATION>();\n                    this.changes.set(parentChangeTree, changes)\n                }\n                // DELETE / DELETE BY REF ID\n                changes.set(changeTree.parentIndex, OPERATION.DELETE);\n\n            } else {\n                // delete all \"tagged\" properties.\n                metadata[-2].forEach((index) =>\n                    changes.set(index, OPERATION.DELETE));\n            }\n\n\n        } else {\n            // delete only tagged properties\n            metadata[-3][tag].forEach((index) =>\n                changes.set(index, OPERATION.DELETE));\n        }\n\n        // remove tag\n        if (this.tags && this.tags.has(changeTree)) {\n            const tags = this.tags.get(changeTree);\n            if (tag === undefined) {\n                // delete all tags\n                this.tags.delete(changeTree);\n            } else {\n                // delete specific tag\n                tags.delete(tag);\n\n                // if tag set is empty, delete it entirely\n                if (tags.size === 0) {\n                    this.tags.delete(changeTree);\n                }\n            }\n        }\n\n        return this;\n    }\n}","export { Schema } from \"./Schema\";\nexport type { DataChange } from \"./decoder/DecodeOperation\";\n\nimport { $track, $encoder, $decoder, $filter, $getByIndex, $deleteByIndex, $changes, $childType } from \"./types/symbols\";\nexport { $track, $encoder, $decoder, $filter, $getByIndex, $deleteByIndex, $changes, $childType };\n\nexport type { ToJSON } from \"./types/HelperTypes\";\n\nimport { MapSchema } from \"./types/custom/MapSchema\"\nexport { MapSchema };\n\nimport { ArraySchema } from \"./types/custom/ArraySchema\";\nexport { ArraySchema };\n\nimport { CollectionSchema } from \"./types/custom/CollectionSchema\";\nexport { CollectionSchema };\n\nimport { SetSchema } from \"./types/custom/SetSchema\";\nexport { SetSchema };\n\nimport { registerType } from \"./types/registry\";\nexport { registerType };\n\nregisterType(\"map\", { constructor: MapSchema });\nregisterType(\"array\", { constructor: ArraySchema });\nregisterType(\"set\", { constructor: SetSchema });\nregisterType(\"collection\", { constructor: CollectionSchema, });\n\n// Utils\nexport { dumpChanges } from \"./utils\";\n\n// Encoder / Decoder\nexport type { Iterator } from \"./encoding/decode\";\nimport * as encode from \"./encoding/encode\";\nimport * as decode from \"./encoding/decode\";\nexport { encode, decode };\n\n// Reflection\nexport {\n    Reflection,\n    ReflectionType,\n    ReflectionField,\n} from \"./Reflection\";\n\nexport { Metadata } from \"./Metadata\";\n\nexport {\n    // Annotations\n    type,\n    deprecated,\n    defineTypes,\n    view,\n\n    // Internals\n    TypeContext,\n} from \"./annotations\";\n\n// Annotation types\nexport type { DefinitionType, PrimitiveType, Definition, } from \"./annotations\";\n\nexport { getDecoderStateCallbacks, CallbackProxy, GetCallbackProxy } from \"./decoder/strategy/StateCallbacks\";\nexport { getRawChangesCallback } from \"./decoder/strategy/RawChanges\";\n\nexport { Encoder } from \"./encoder/Encoder\";\nexport { encodeSchemaOperation, encodeArray as encodeKeyValueOperation } from \"./encoder/EncodeOperation\";\nexport { ChangeTree, Ref } from \"./encoder/ChangeTree\";\nexport { StateView } from \"./encoder/StateView\";\n\nexport { Decoder } from \"./decoder/Decoder\";\nexport { decodeSchemaOperation, decodeKeyValueOperation } from \"./decoder/DecodeOperation\";\n\nexport { OPERATION } from \"./encoding/spec\";"],"names":["_a","int8","uint8","int16","uint16","int32","uint32","int64","uint64","float32","float64","_int32","_float32","_float64","boolean","string","number","encode.number","encode.string","decode.number","decode.string","_b","decode.switchStructureCheck"],"mappings":"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","x_google_ignoreList":[18]}